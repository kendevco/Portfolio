interface VisitorData {
  sessionId: string;
  email?: string;
  name?: string;
  metadata?: Record<string, any>;
}

interface ExternalMessagePayload {
  channelId?: string;
  conversationId?: string;
  content: string;
  sourceType: string;
  sourceId?: string;
  visitorData?: VisitorData;
  agentData?: {
    displayName?: string;
    avatarUrl?: string;
    description?: string;
  };
  impersonateUser?: string;
}

interface AgentCreatePayload {
  agentType: "AI_ASSISTANT" | "VAPI_TRANSCRIBER" | "SYSTEM_NOTIFIER" | "PORTFOLIO_VISITOR" | "WORKFLOW_RESPONDER" | "EXTERNAL_SERVICE";
  displayName: string;
  email: string;
  avatarUrl?: string;
  description?: string;
  canImpersonate?: boolean;
  canCreateUsers?: boolean;
  systemBot?: boolean;
  sourceConfig?: Record<string, any>;
  responseConfig?: Record<string, any>;
}

export class DiscordantClient {
  private apiToken: string;
  private baseUrl: string;
  private portfolioChannelId: string;
  private vapiChannelId: string;

  constructor() {
    this.apiToken = process.env.DISCORDANT_API_TOKEN || '';
    this.baseUrl = process.env.DISCORDANT_BASE_URL || '';
    this.portfolioChannelId = process.env.DISCORDANT_PORTFOLIO_CHANNEL_ID || '';
    this.vapiChannelId = process.env.DISCORDANT_VAPI_CHANNEL_ID || '';

    if (!this.apiToken || !this.baseUrl) {
      console.warn('Discordant client not properly configured');
    }
  }

  private async makeRequest(endpoint: string, options: RequestInit = {}) {
    const url = `${this.baseUrl}/api/external${endpoint}`;
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Authorization': `Bearer ${this.apiToken}`,
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ message: 'Unknown error' }));
      throw new Error(`Discordant API Error: ${response.status} - ${error.message}`);
    }

    return response.json();
  }

  /**
   * Send a contact form submission to Discordant
   */
  async sendContactFormMessage(formData: {
    name: string;
    email: string;
    message: string;
    page: string;
    sessionId: string;
    userAgent?: string;
  }) {
    const payload: ExternalMessagePayload = {
      channelId: this.portfolioChannelId,
      content: `**New Contact Form Submission**

**From:** ${formData.name} (${formData.email})
**Page:** ${formData.page}
**Message:**
${formData.message}

---
*Submitted via Portfolio Contact Form*`,
      sourceType: 'contact-form',
      sourceId: formData.sessionId,
      visitorData: {
        sessionId: formData.sessionId,
        email: formData.email,
        name: formData.name,
        metadata: {
          page: formData.page,
          userAgent: formData.userAgent,
          origin: process.env.NEXT_PUBLIC_SITE_URL,
          submittedAt: new Date().toISOString()
        }
      }
    };

    return this.makeRequest('/messages', {
      method: 'POST',
      body: JSON.stringify(payload)
    });
  }

  /**
   * Send VAPI call transcript to Discordant
   */
  async sendVAPITranscript(callData: {
    sessionId: string;
    transcript: string;
    duration: number;
    callerId?: string;
    summary?: string;
    actionItems?: string[];
  }) {
    const payload: ExternalMessagePayload = {
      channelId: this.vapiChannelId,
      content: `**🎙️ VAPI Call Transcript**

**Session ID:** ${callData.sessionId}
**Duration:** ${callData.duration}s
**Caller:** ${callData.callerId || 'Anonymous'}

**Transcript:**
${callData.transcript}

${callData.summary ? `**Summary:**\n${callData.summary}\n` : ''}
${callData.actionItems?.length ? `**Action Items:**\n${callData.actionItems.map(item => `• ${item}`).join('\n')}\n` : ''}

---
*Generated by VAPI Integration*`,
      sourceType: 'vapi-call',
      sourceId: callData.sessionId,
      visitorData: {
        sessionId: callData.sessionId,
        metadata: {
          duration: callData.duration,
          callType: 'vapi',
          hasTranscript: true,
          callEndedAt: new Date().toISOString()
        }
      }
    };

    return this.makeRequest('/messages', {
      method: 'POST',
      body: JSON.stringify(payload)
    });
  }

  /**
   * Send a chat widget message to Discordant
   */
  async sendChatMessage(messageData: {
    content: string;
    sessionId: string;
    visitorName?: string;
    visitorEmail?: string;
    page: string;
  }) {
    const payload: ExternalMessagePayload = {
      channelId: this.portfolioChannelId,
      content: messageData.content,
      sourceType: 'chat-widget',
      sourceId: messageData.sessionId,
      visitorData: {
        sessionId: messageData.sessionId,
        email: messageData.visitorEmail,
        name: messageData.visitorName,
        metadata: {
          page: messageData.page,
          chatSource: 'portfolio-widget',
          timestamp: new Date().toISOString()
        }
      }
    };

    return this.makeRequest('/messages', {
      method: 'POST',
      body: JSON.stringify(payload)
    });
  }

  /**
   * Create an agent user in Discordant
   */
  async createAgent(agentData: AgentCreatePayload) {
    return this.makeRequest('/agents', {
      method: 'POST',
      body: JSON.stringify(agentData)
    });
  }

  /**
   * Create required portfolio agents
   */
  async setupPortfolioAgents() {
    const agents = [
      {
        agentType: 'AI_ASSISTANT' as const,
        displayName: 'Portfolio AI Assistant',
        email: 'ai-assistant@portfolio.kendev.co',
        description: 'Handles portfolio inquiries and provides AI-powered responses',
        systemBot: true,
        avatarUrl: '/images/ai-assistant-avatar.png'
      },
      {
        agentType: 'VAPI_TRANSCRIBER' as const,
        displayName: 'VAPI Voice Assistant',
        email: 'vapi@portfolio.kendev.co',
        description: 'Processes voice call transcripts and summaries',
        systemBot: true,
        avatarUrl: '/images/vapi-avatar.png'
      },
      {
        agentType: 'SYSTEM_NOTIFIER' as const,
        displayName: 'Portfolio System',
        email: 'system@portfolio.kendev.co',
        description: 'System notifications and automated messages',
        systemBot: true,
        avatarUrl: '/images/system-avatar.png'
      }
    ];

    const results = [];
    for (const agent of agents) {
      try {
        const result = await this.createAgent(agent);
        results.push({ agent: agent.displayName, success: true, result });
      } catch (error) {
        results.push({ agent: agent.displayName, success: false, error: error instanceof Error ? error.message : String(error) });
      }
    }

    return results;
  }

  /**
   * Get embeddable chat widget URL
   */
  getChatWidgetUrl(config: {
    theme?: 'light' | 'dark';
    visitorData?: Partial<VisitorData>;
    channelId?: string;
  } = {}) {
    const params = new URLSearchParams({
      channelId: config.channelId || this.portfolioChannelId,
      theme: config.theme || 'light',
      ...config.visitorData && { visitorData: JSON.stringify(config.visitorData) }
    });

    return `${this.baseUrl}/embed/chat?${params}`;
  }

  /**
   * Send system notification
   */
  async sendSystemNotification(message: string, metadata?: Record<string, any>) {
    const payload: ExternalMessagePayload = {
      channelId: this.portfolioChannelId,
      content: `🔔 **System Notification**\n\n${message}`,
      sourceType: 'system-notification',
      visitorData: {
        sessionId: `system-${Date.now()}`,
        metadata: {
          notificationType: 'system',
          timestamp: new Date().toISOString(),
          ...metadata
        }
      }
    };

    return this.makeRequest('/messages', {
      method: 'POST',
      body: JSON.stringify(payload)
    });
  }
}

// Singleton instance
export const discordantClient = new DiscordantClient(); 