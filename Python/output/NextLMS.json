[{"path": ".", "filename": "middleware.ts", "content": "import { authMiddleware } from \"@clerk/nextjs\"; "}, {"path": ".", "filename": "next-env.d.ts", "content": ""}, {"path": ".", "filename": "next.config.js", "content": " const nextConfig = { images: { domains: ['utfs.io', 'img.clerk.com'] }, } module.exports = nextConfig "}, {"path": ".", "filename": "postcss.config.js", "content": "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {}, }, } "}, {"path": ".", "filename": "tailwind.config.js", "content": " module.exports = { darkMode: [\"class\"], content: [ './pages*.{ts,tsx}', './components*.{ts,tsx}', './app*.{ts,tsx}', './src*.{ts,tsx}', ], theme: { container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\", }, }, extend: { colors: { border: \"hsl(var(--border))\", input: \"hsl(var(--input))\", ring: \"hsl(var(--ring))\", background: \"hsl(var(--background))\", foreground: \"hsl(var(--foreground))\", primary: { DEFAULT: \"hsl(var(--primary))\", foreground: \"hsl(var(--primary-foreground))\", }, secondary: { DEFAULT: \"hsl(var(--secondary))\", foreground: \"hsl(var(--secondary-foreground))\", }, destructive: { DEFAULT: \"hsl(var(--destructive))\", foreground: \"hsl(var(--destructive-foreground))\", }, muted: { DEFAULT: \"hsl(var(--muted))\", foreground: \"hsl(var(--muted-foreground))\", }, accent: { DEFAULT: \"hsl(var(--accent))\", foreground: \"hsl(var(--accent-foreground))\", }, popover: { DEFAULT: \"hsl(var(--popover))\", foreground: \"hsl(var(--popover-foreground))\", }, card: { DEFAULT: \"hsl(var(--card))\", foreground: \"hsl(var(--card-foreground))\", }, }, borderRadius: { lg: \"var(--radius)\", md: \"calc(var(--radius) - 2px)\", sm: \"calc(var(--radius) - 4px)\", }, keyframes: { \"accordion-down\": { from: { height: 0 }, to: { height: \"var(--radix-accordion-content-height)\" }, }, \"accordion-up\": { from: { height: \"var(--radix-accordion-content-height)\" }, to: { height: 0 }, }, }, animation: { \"accordion-down\": \"accordion-down 0.2s ease-out\", \"accordion-up\": \"accordion-up 0.2s ease-out\", }, }, }, plugins: [require(\"tailwindcss-animate\")], }"}, {"path": ".", "filename": "types.ts", "content": "import { Category, Course, Profile } from \"@prisma/client\"; export type CourseWithProgressWithCategory = Course & { category: Category | null; chapters: { id: string }[]; progress: number | null; }; export type SafeProfile = Omit< Profile, \"createdAt\" | \"updatedAt\" > & { createdAt: string; updatedAt: string; }; "}, {"path": ".\\actions", "filename": "get-analytics.ts", "content": "import { db } from \"@/lib/db\"; import { Course, Purchase } from \"@prisma/client\"; type PurchaseWithCourse = Purchase & { course: Course; }; const groupByCourse = (purchases: PurchaseWithCourse[]) => { const grouped: { [courseTitle: string]: number } = {}; purchases.forEach((purchase) => { const courseTitle = purchase.course.title; if (!grouped[courseTitle]) { grouped[courseTitle] = 0; } grouped[courseTitle] += purchase.course.price!; }); return grouped; }; export const getAnalytics = async (userId: string) => { try { const purchases = await db.purchase.findMany({ where: { course: { userId: userId } }, include: { course: true, } }); const groupedEarnings = groupByCourse(purchases); const data = Object.entries(groupedEarnings).map(([courseTitle, total]) => ({ name: courseTitle, total: total, })); const totalRevenue = data.reduce((acc, curr) => acc + curr.total, 0); const totalSales = purchases.length; return { data, totalRevenue, totalSales, } } catch (error) { console.log(\"[GET_ANALYTICS]\", error); return { data: [], totalRevenue: 0, totalSales: 0, } } }"}, {"path": ".\\actions", "filename": "get-chapter.ts", "content": "import { AttachmentForm } from \"@/app/(dashboard)/(routes)/teacher/courses/[courseId]/_components/attachment-form\"; import { db } from \"@/lib/db\"; import { Attachment, Chapter } from \"@prisma/client\"; interface getChapterProps { userId: string; courseId: string; chapterId: string; }; export const getChapter = async ({ userId, courseId, chapterId }: getChapterProps) => { try { const purchase = await db.purchase.findUnique({ where: { userId_courseId: { userId, courseId, }, } }); const course = await db.course.findUnique({ where: { isPublished: true, id: courseId, }, select: { price: true, } }); const chapter = await db.chapter.findUnique({ where: { id: chapterId, isPublished: true, }, }); if (!chapter || !course) { throw new Error(\"Chapter or course not found\"); } let muxData = null; let attachments: Attachment[] = []; let nextChapter: Chapter | null = null; if (purchase) { attachments = await db.attachment.findMany({ where: { courseId: courseId, }, }); } if (chapter.isFree || purchase) { muxData = await db.muxData.findUnique({ where: { chapterId: chapterId, }, }); nextChapter = await db.chapter.findFirst({ where: { courseId: courseId, isPublished: true, position: { gt: chapter?.position, }, }, orderBy: { position: \"asc\", }, }); } const userProgress = await db.userProgress.findUnique({ where: { userId_chapterId: { userId, chapterId, }, }, }); return { chapter, course, muxData, attachments, nextChapter, userProgress, purchase, }; } catch (error) { console.log(error); return { chapter: null, course: null, muxData: null, attachments: null, nextChapter: null, userProgress: null, purchase: null, } } }"}, {"path": ".\\actions", "filename": "get-courses.ts", "content": "import { Category, Course } from \"@prisma/client\"; import { getProgress } from \"@/actions/get-progress\"; import { db } from \"@/lib/db\"; import { CourseWithProgressWithCategory } from \"@/types\"; type GetCourses = { userId: string; title?: string; categoryId?: string; }; export const getCourses = async ({ userId, title, categoryId }: GetCourses): Promise<CourseWithProgressWithCategory[]> => { try { const courses = await db.course.findMany({ where: { isPublished: true, title: { contains: title, mode: \"insensitive\", }, categoryId, }, include: { category: true, chapters: { where: { isPublished: true, }, select: { id: true, } }, purchases: { where: { userId, } } }, orderBy: { createdAt: \"desc\", } }); const coursesWithProgress: CourseWithProgressWithCategory[] = await Promise.all( courses.map(async (course) => { if (course.purchases.length === 0) { return { ...course, progress: null, "}, {"path": ".\\actions", "filename": "get-dashboard-courses.ts", "content": "import { db } from \"@/lib/db\"; import { Category, Chapter, Course } from \"@prisma/client\"; import { getProgress } from \"./get-progress\"; type CourseWithProgressWithCategory = Course & { category: Category; chapters: Chapter[]; progress: number | null; } type DashboardCourses = { completedCourses: CourseWithProgressWithCategory[]; coursesInProgress: CourseWithProgressWithCategory[]; } export const getDashboardCourses = async (userId: string): Promise<DashboardCourses> => { try { const purchasedCourses = await db.purchase.findMany({ where: { userId }, select: { course: { include: { category: true, chapters: { where: { isPublished: true }, } }, }, } }); const courses = purchasedCourses.map((purchase) => purchase.course) as CourseWithProgressWithCategory[]; for (let course of courses) { const progress = await getProgress(userId, course.id); course[\"progress\"] = progress; } "}, {"path": ".\\actions", "filename": "get-progress.ts", "content": "import { db } from \"@/lib/db\"; export const getProgress = async ( userId: string, courseId: string ): Promise<number | null> => { try { const publishedChapters = await db.chapter.findMany({ where: { courseId: courseId, isPublished: true, }, select: { id: true, }, }); "}, {"path": ".\\actions", "filename": "get-safe-profile.ts", "content": "import { db } from \"@/lib/db\"; import { SafeProfile } from \"@/types\"; import { auth, currentUser } from \"@clerk/nextjs\" import { redirect } from \"next/navigation\"; export default async function getSafeProfile() { try { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const currentProfile = await db.profile.findUnique({ where: { userId, }, select: { id: true, userId: true, name: true, imageUrl: true, email: true, role: true, createdAt: true, updatedAt: true, }, }); if (!currentProfile) { return null; } "}, {"path": ".\\app", "filename": "layout.tsx", "content": "import type { Metadata } from 'next' import { ClerkProvider } from '@clerk/nextjs' import { Inter } from 'next/font/google' import './globals.css' import { ToastProvider } from '@/components/providers/toaster-provider' import ThemeSwitch from \"@/components/theme-switch\"; import ThemeContextProvider from '@/components/providers/theme-provider' import { ConfettiProvider } from '@/components/providers/confetti-provider' const inter = Inter({ subsets: ['latin'] }) export const metadata: Metadata = { title: 'KenDev NextJS LMS', description: 'Coded by Ken along with Antonio', } export default function RootLayout({ children, }: { children: React.ReactNode }) { return ( <ClerkProvider> <html lang=\"en\"> <body className={inter.className}> <ThemeContextProvider> <ConfettiProvider /> <ToastProvider /> {children} <ThemeSwitch /> </ThemeContextProvider> </body> </html> </ClerkProvider> ) } "}, {"path": ".\\app\\(auth)", "filename": "layout.tsx", "content": "const AuthLayout = ({ children }: {children:React.ReactNode}) => { return ( <div className=\"h-full flex items-center justify-center\" > {children} </div> ); } export default AuthLayout;"}, {"path": ".\\app\\(auth)\\(routes)\\sign-in\\[[...sign-in]]", "filename": "page.tsx", "content": "import { SignIn } from \"@clerk/nextjs\"; export default function Page() { return <SignIn />; }"}, {"path": ".\\app\\(auth)\\(routes)\\sign-up\\[[...signup]]", "filename": "page.tsx", "content": "import { SignUp } from \"@clerk/nextjs\"; export default function Page() { return <SignUp />; }"}, {"path": ".\\app\\(course)\\courses\\[courseId]", "filename": "layout.tsx", "content": "import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; import { getProgress } from \"@/actions/get-progress\"; import { CourseSidebar } from \"./_components/course-sidebar\"; import { CourseNavbar } from \"./_components/course-navbar\"; import getSafeProfile from \"@/actions/get-safe-profile\"; const CourseLayout = async ({ children, params }: { children: React.ReactNode; params: { courseId: string }; }) => { const { userId } = auth(); if (!userId) { return redirect(\"/\") } const safeProfile = await getSafeProfile(); if (!safeProfile) { return redirect(\"/\"); } const course = await db.course.findUnique({ where: { id: params.courseId, }, include: { chapters: { where: { isPublished: true, }, include: { userProgress: { where: { userId, } } }, orderBy: { position: \"asc\" } }, }, }); if (!course) { return redirect(\"/\"); } "}, {"path": ".\\app\\(course)\\courses\\[courseId]", "filename": "page.tsx", "content": "import { db } from \"@/lib/db\"; import { redirect } from \"next/navigation\"; const CourseIdPage = async ({ params }: { params: { courseId: string; } }) => { const course = await db.course.findUnique({ where: { id: params.courseId, }, include: { chapters: { where: { isPublished: true, }, orderBy: { position: \"asc\" } } } }); if (!course) { return redirect(\"/\"); } return redirect(`/courses/${course.id}/chapters/${course.chapters[0].id}`); } export default CourseIdPage;"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\chapters\\[chapterId]", "filename": "page.tsx", "content": "import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { File } from \"lucide-react\"; import { getChapter } from \"@/actions/get-chapter\"; import { Banner } from \"@/components/banner\"; import { Separator } from \"@/components/ui/separator\"; import { Preview } from \"@/components/preview\"; import { VideoPlayer } from \"./_components/video-player\"; import { CourseEnrollButton } from \"./_components/course-enroll-button\"; import { CourseProgressButton } from \"./_components/course-progress-button\"; const ChapterIdPage = async ({ params }: { params: { courseId: string; chapterId: string } }) => { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const { chapter, course, muxData, attachments, nextChapter, userProgress, purchase, } = await getChapter({ userId, chapterId: params.chapterId, courseId: params.courseId, }); if (!chapter || !course) { return redirect(\"/\") } const isLocked = !chapter.isFree && !purchase; const completeOnEnd = !!purchase && !userProgress?.isCompleted; return ( <div> {userProgress?.isCompleted && ( <Banner variant=\"success\" label=\"You already completed this chapter.\" /> )} {isLocked && ( <Banner variant=\"warning\" label=\"You need to purchase this course to watch this chapter.\" /> )} <div className=\"flex flex-col max-w-4xl mx-auto pb-20\"> <div className=\"p-4\"> <VideoPlayer chapterId={params.chapterId} title={chapter.title} courseId={params.courseId} nextChapterId={nextChapter?.id} playbackId={muxData?.playbackId!} isLocked={isLocked} completeOnEnd={completeOnEnd} /> </div> <div> <div className=\"p-4 flex flex-col md:flex-row items-center justify-between\"> <h2 className=\"text-2xl font-semibold mb-2\"> {chapter.title} </h2> {purchase ? ( <CourseProgressButton chapterId={params.chapterId} courseId={params.courseId} nextChapterId={nextChapter?.id} isCompleted={!!userProgress?.isCompleted} /> ) : ( <CourseEnrollButton courseId={params.courseId} price={course.price!} /> )} </div> <Separator /> <div> <Preview value={chapter.description!} /> </div> {!!attachments.length && ( <> <Separator /> <div className=\"p-4\"> {attachments.map((attachment) => ( <a href={attachment.url} target=\"_blank\" key={attachment.id} className='flex items-center p3 w-full bg-sky-200 dark:bg-sky-800 text-sky-700 dark:text-sky-300 hover:underline' > <File /> <p className=\"line-clamp-1\"> {attachment.name} </p> </a> ))} </div> </> )} </div> </div> </div> ); } export default ChapterIdPage;"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "course-enroll-button.tsx", "content": "\"use client\"; import axios from \"axios\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { Button } from \"@/components/ui/button\"; import { formatPrice } from \"@/lib/format\"; interface CourseEnrollButtonProps { price: number; courseId: string; } export const CourseEnrollButton = ({ price, courseId, }: CourseEnrollButtonProps) => { const [isLoading, setIsLoading] = useState(false); const onClick = async () => { try { setIsLoading(true); const response = await axios.post(`/api/courses/${courseId}/checkout`) window.location.assign(response.data.url); } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } return ( <Button onClick={onClick} disabled={isLoading} size=\"sm\" className=\"w-full md:w-auto\" > Enroll for {formatPrice(price)} </Button> ) }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "course-progress-button.tsx", "content": "\"use client\"; import axios from \"axios\"; import { CheckCircle, XCircle } from \"lucide-react\"; import { useRouter } from \"next/navigation\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { Button } from \"@/components/ui/button\"; import { useConfettiStore } from \"@/hooks/use-confetti-store\"; interface CourseProgressButtonProps { chapterId: string; courseId: string; isCompleted?: boolean; nextChapterId?: string; }; export const CourseProgressButton = ({ chapterId, courseId, isCompleted, nextChapterId }: CourseProgressButtonProps) => { const router = useRouter(); const confetti = useConfettiStore(); const [isLoading, setIsLoading] = useState(false); const onClick = async () => { try { setIsLoading(true); await axios.put(`/api/courses/${courseId}/chapters/${chapterId}/progress`, { isCompleted: !isCompleted }); if (!isCompleted && !nextChapterId) { confetti.onOpen(); } if (!isCompleted && nextChapterId) { router.push(`/courses/${courseId}/chapters/${nextChapterId}`); } toast.success(\"Progress updated\"); router.refresh(); } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } const Icon = isCompleted ? XCircle : CheckCircle return ( <Button onClick={onClick} disabled={isLoading} type=\"button\" variant={isCompleted ? \"outline\" : \"success\"} className=\"w-full md:w-auto\" > {isCompleted ? \"Not completed\" : \"Mark as complete\"} <Icon className=\"h-4 w-4 ml-2\" /> </Button> ) }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "video-player.tsx", "content": "\"use client\"; import axios from \"axios\"; import MuxPlayer from \"@mux/mux-player-react\"; import { useState } from \"react\"; import { toast } from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Loader2, Lock } from \"lucide-react\"; import { cn } from \"@/lib/utils\"; import { useConfettiStore } from \"@/hooks/use-confetti-store\"; interface VideoPlayerProps { playbackId?: string | null; courseId: string; chapterId: string; nextChapterId?: string; isLocked: boolean; completeOnEnd: boolean; title: string; } export const VideoPlayer = ({ playbackId, courseId, chapterId, nextChapterId, isLocked, completeOnEnd, title, }: VideoPlayerProps) => { const [isReady, setIsReady] = useState(false); const router = useRouter(); const confetti = useConfettiStore(); const onEnd = async () => { try { if (completeOnEnd) { await axios.put(`/api/courses/${courseId}/chapters/${chapterId}/progress`, { isCompleted: true, }); if (!nextChapterId) { confetti.onOpen(); } toast.success(\"Progress updated\"); router.refresh(); if (nextChapterId) { router.push(`/courses/${courseId}/chapters/${nextChapterId}`) } } } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"relative aspect-video\"> {!isReady && !isLocked && ( <div className=\"absolute inset-0 flex items-center justify-center bg-slate-800 dark:bg-slate-200\"> <Loader2 className=\"h-8 w-8 animate-spin text-secondary\" /> </div> )} {isLocked && ( <div className=\"absolute inset-0 flex items-center justify-center bg-slate-800 dark:bg-slate-200 flex-col gap-y-2 text-secondary\"> <Lock className=\"h-8 w-8\" /> <p className=\"text-sm\"> This chapter is locked </p> </div> )} {!isLocked && playbackId && ( <MuxPlayer title={title} className={cn( !isReady && \"hidden\" )} onCanPlay={() => setIsReady(true)} onEnded={onEnd} autoPlay playbackId={playbackId} /> )} </div> ) }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\_components", "filename": "course-mobile-sidebar.tsx", "content": "import { Menu } from \"lucide-react\"; import { Chapter, Course, UserProgress } from \"@prisma/client\"; import { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\"; import { CourseSidebar } from \"./course-sidebar\"; interface CourseMobileSidebarProps { course: Course & { chapters: (Chapter & { userProgress: UserProgress[] | null; })[]; }; progressCount: number; }; export const CourseMobileSidebar = ({ course, progressCount, }: CourseMobileSidebarProps) => { return ( <Sheet> <SheetTrigger className=\"md:hidden pr-4 hover:opacity-75 transition\"> <Menu /> </SheetTrigger> <SheetContent side=\"left\" className=\"p-0 w-72\"> <CourseSidebar course={course} progressCount={progressCount} /> </SheetContent> </Sheet> ) }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\_components", "filename": "course-navbar.tsx", "content": "import { Chapter, Course, UserProgress, Profile } from \"@prisma/client\" import { NavbarRoutes } from \"@/components/navbar-routes\"; import { CourseMobileSidebar } from \"./course-mobile-sidebar\"; import { SafeProfile } from \"@/types\"; interface CourseNavbarProps { course: Course & { chapters: (Chapter & { userProgress: UserProgress[] | null; })[]; }; progressCount: number; currentProfile?: SafeProfile | null; }; export const CourseNavbar = ({ course, progressCount, currentProfile }: CourseNavbarProps) => { return ( <div className=\"p-4 border-b h-full flex items-center shadow-sm\"> <CourseMobileSidebar course={course} progressCount={progressCount} /> <NavbarRoutes currentProfile={currentProfile} /> </div> ) }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\_components", "filename": "course-sidebar-item.tsx", "content": "\"use client\"; import { CheckCircle, Lock, PlayCircle } from \"lucide-react\"; import { usePathname, useRouter } from \"next/navigation\"; import { cn } from \"@/lib/utils\"; interface CourseSidebarItemProps { label: string; id: string; isCompleted: boolean; courseId: string; isLocked: boolean; }; export const CourseSidebarItem = ({ label, id, isCompleted, courseId, isLocked, }: CourseSidebarItemProps) => { const pathname = usePathname(); const router = useRouter(); const Icon = isLocked ? Lock : (isCompleted ? CheckCircle : PlayCircle); const isActive = pathname?.includes(id); const onClick = () => { router.push(`/courses/${courseId}/chapters/${id}`); } return ( <button onClick={onClick} type=\"button\" className={cn( \"flex items-center gap-x-2 text-slate-500 text-sm font-[500] pl-6 transition-all hover:text-slate-600 hover:bg-slate-300/20\", isActive && \"text-slate-700 bg-slate-200/20 hover:bg-slate-200/20 hover:text-slate-700 dark:text-slate-300 dark:bg-slate-800 dark:hover:bg-slate-700/20 dark:hover:text-slate-100\", isCompleted && \"text-emerald-700 hover:text-emerald-700 dark:text-emerald-400 dark:hover:text-emerald-100\", isCompleted && isActive && \"bg-emerald-200/20 dark:bg-emerald-300/20\", )} > <div className=\"flex items-center gap-x-2 py-4\"> <Icon size={22} className={cn( \"text-slate-500\", isActive && \"text-slate-700 dark:text-slate-300\", isCompleted && \"text-emerald-700 dark:text-emerald-400\" )} /> {label} </div> <div className={cn( \"ml-auto opacity-0 border-2 border-slate-700 h-full transition-all\", isActive && \"opacity-100\", isCompleted && \"border-emerald-700\" )} /> </button> ); }"}, {"path": ".\\app\\(course)\\courses\\[courseId]\\_components", "filename": "course-sidebar.tsx", "content": "import { auth } from \"@clerk/nextjs\"; import { Chapter, Course, UserProgress } from \"@prisma/client\" import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; import { CourseProgress } from \"@/components/course-progress\"; import { CourseSidebarItem } from \"./course-sidebar-item\"; interface CourseSidebarProps { course: Course & { chapters: (Chapter & { userProgress: UserProgress[] | null; })[] }; progressCount: number; }; export const CourseSidebar = async ({ course, progressCount, }: CourseSidebarProps) => { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const purchase = await db.purchase.findUnique({ where: { userId_courseId: { userId, courseId: course.id, } } }); return ( <div className=\"h-full border-r flex flex-col overflow-y-auto shadow-sm\"> <div className=\"p-8 flex flex-col border-b\"> <h1 className=\"font-semibold\"> {course.title} </h1> {purchase && ( <div className=\"mt-10\"> <CourseProgress variant=\"success\" value={progressCount} /> </div> )} </div> <div className=\"flex flex-col w-full\"> {course.chapters.map((chapter) => ( <CourseSidebarItem key={chapter.id} id={chapter.id} label={chapter.title} isCompleted={!!chapter.userProgress?.[0]?.isCompleted} courseId={course.id} isLocked={!chapter.isFree && !purchase} /> ))} </div> </div> ) }"}, {"path": ".\\app\\(dashboard)", "filename": "layout.tsx", "content": "import { SidebarIcon } from \"lucide-react\"; import { Sidebar } from \"./_components/Sidebar\"; import { Navbar } from \"./_components/navbar\"; import { redirect } from \"next/navigation\"; import getSafeProfile from \"@/actions/get-safe-profile\"; const DashboardLayout = async ({ children }: { children: React.ReactNode }) => { const safeProfile = await getSafeProfile(); if (!safeProfile) { return redirect(\"/\"); } return ( <div className=\"h-full dark:bg-gray-900\"> <div className=\"h-[80px] md:pl-56 fixed inset-y-0 w-full z-50 dark:bg-gray-900\"> <Navbar currentProfile={safeProfile} /> </div> <div className=\"hidden md:flex h-full w-56 flex-col fixed inset-y-0 z-50 dark:bg-gray-900\"> <Sidebar /> </div> {/* pt or pull top pushes the content down accounting for the height of the navbar 1:26:33 / 10:41:03 - https:"}, {"path": ".\\app\\(dashboard)\\(routes)\\(root)", "filename": "page.tsx", "content": "import { auth } from \"@clerk/nextjs\" import { redirect } from \"next/navigation\"; import { CheckCircle, Clock, InfoIcon } from \"lucide-react\"; import { getDashboardCourses } from \"@/actions/get-dashboard-courses\"; import { CoursesList } from \"@/components/courses-list\"; import { InfoCard } from \"./_components/info-card\"; import { BannerCard } from \"./_components/banner-card\"; export default async function Dashboard() { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const { completedCourses, coursesInProgress } = await getDashboardCourses(userId); return ( <div className=\"p-6 space-y-4\"> <div className=\"grid grid-cols-1 gap-4\"> <BannerCard icon={InfoIcon} label=\"Welcome to the dashboard\" description={`This is where you can see your progress and continue your courses. This is a demonstration LMS and as such, all courses are free and Stripe is in test mode. To enroll in a course, enter dummy data in the Stripe form. Contact me from folio.kendev.co to obtain admin access`} /> </div> <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\"> <InfoCard icon={Clock} label=\"In Progress\" numberOfItems={coursesInProgress.length} /> <InfoCard icon={CheckCircle} label=\"Completed\" numberOfItems={completedCourses.length} variant=\"success\" /> </div> <CoursesList items={[...coursesInProgress, ...completedCourses]} /> </div> ) } "}, {"path": ".\\app\\(dashboard)\\(routes)\\(root)\\_components", "filename": "banner-card.tsx", "content": "import { LucideIcon } from \"lucide-react\"; import { IconBadge } from \"@/components/icon-badge\" interface BannerCardProps { variant?: \"default\" | \"success\"; label: string; description: string; icon: LucideIcon; } export const BannerCard = ({ variant, icon: Icon, description, label, }: BannerCardProps) => { return ( <div className=\"border rounded-md flex items-center gap-x-2 p-3\"> <IconBadge variant={variant} icon={Icon} /> <div> <p className=\"font-medium\"> {label} </p> <p className=\"text-gray-700 dark:text-gray-200 text-sm\"> { description } </p> </div> </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\(root)\\_components", "filename": "info-card.tsx", "content": "import { LucideIcon } from \"lucide-react\"; import { IconBadge } from \"@/components/icon-badge\" interface InfoCardProps { numberOfItems: number; variant?: \"default\" | \"success\"; label: string; icon: LucideIcon; } export const InfoCard = ({ variant, icon: Icon, numberOfItems, label, }: InfoCardProps) => { return ( <div className=\"border rounded-md flex items-center gap-x-2 p-3\"> <IconBadge variant={variant} icon={Icon} /> <div> <p className=\"font-medium\"> {label} </p> <p className=\"text-gray-500 text-sm\"> {numberOfItems} {numberOfItems === 1 ? \"Course\" : \"Courses\"} </p> </div> </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\search", "filename": "page.tsx", "content": "import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; import { SearchInput } from \"@/components/search-input\"; import { getCourses } from \"@/actions/get-courses\"; import { CoursesList } from \"@/components/courses-list\"; import { Categories } from \"./_components/categories\"; interface SearchPageProps { searchParams: { title: string; categoryId: string; } }; const SearchPage = async ({ searchParams }: SearchPageProps) => { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const categories = await db.category.findMany({ orderBy: { name: \"asc\" } }); const courses = await getCourses({ userId, ...searchParams, }); return ( <> <div className=\"px-6 pt-6 md:hidden md:mb-0 block\"> <SearchInput /> </div> <div className=\"p-6 space-y-4\"> <Categories items={categories} /> <CoursesList items={courses} /> </div> </> ); } export default SearchPage;"}, {"path": ".\\app\\(dashboard)\\(routes)\\search\\_components", "filename": "categories.tsx", "content": "\"use client\"; import { Category } from \"@prisma/client\"; import { FcEngineering, FcFilmReel, FcMultipleDevices, FcMusic, FcOldTimeCamera, FcSalesPerformance, FcSportsMode } from \"react-icons/fc\"; import { IconType } from \"react-icons\"; import { CategoryItem } from \"./category-item\"; interface CategoriesProps { items: Category[]; } const iconMap: Record<Category[\"name\"], IconType> = { \"Music\": FcMusic, \"Photography\": FcOldTimeCamera, \"Fitness\": FcSportsMode, \"Accounting\": FcSalesPerformance, \"Computer Science\": FcMultipleDevices, \"Filming\": FcFilmReel, \"Engineering\": FcEngineering, }; export const Categories = ({ items, }: CategoriesProps) => { return ( <div className=\"flex items-center gap-x-2 overflow-x-auto pb-2\"> {items.map((item) => ( <CategoryItem key={item.id} label={item.name} icon={iconMap[item.name]} value={item.id} /> ))} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\search\\_components", "filename": "category-item.tsx", "content": "\"use client\"; import qs from \"query-string\"; import { IconType } from \"react-icons\"; import { usePathname, useRouter, useSearchParams } from \"next/navigation\"; import { cn } from \"@/lib/utils\"; interface CategoryItemProps { label: string; value?: string; icon?: IconType; }; export const CategoryItem = ({ label, value, icon: Icon, }: CategoryItemProps) => { const pathname = usePathname(); const router = useRouter(); const searchParams = useSearchParams(); const currentCategoryId = searchParams.get(\"categoryId\"); const currentTitle = searchParams.get(\"title\"); const isSelected = currentCategoryId === value; const onClick = () => { const url = qs.stringifyUrl({ url: pathname, query: { title: currentTitle, categoryId: isSelected ? null : value, } }, { skipNull: true, skipEmptyString: true }); router.push(url); }; return ( <button onClick={onClick} className={cn( \"py-2 px-3 text-sm border border-slate-200 rounded-full flex items-center gap-x-1 hover:border-sky-700 transition\", isSelected && \"border-sky-700 bg-sky-200/20 text-sky-800 dark:bg-sky-100\" )} type=\"button\" > {Icon && <Icon size={20} />} <div className=\"truncate\"> {label} </div> </button> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\analytics", "filename": "page.tsx", "content": "import { auth } from '@clerk/nextjs' import { redirect } from 'next/navigation'; import { getAnalytics } from '@/actions/get-analytics'; import { DataCard } from './_components/data-card'; import { Chart } from './_components/chart'; const AnalyticsPage = async () => { const { userId } = auth(); if (!userId) { return redirect('/'); } const { data, totalRevenue, totalSales, } = await getAnalytics(userId); return ( <div className='p-6'> <div className='grid grid-cols-1 md:grid-cols-2 gap-4 mb-4'> <DataCard label=\"Total Revenue\" value={totalRevenue} shouldFormat /> <DataCard label=\"Total Sales\" value={totalSales} shouldFormat={false} /> </div> <Chart data={data} /> </div> ) } export default AnalyticsPage;"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\analytics\\_components", "filename": "chart.tsx", "content": "\"use client\"; import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from \"recharts\" import { Card } from \"@/components/ui/card\"; import { X } from \"lucide-react\"; interface ChartProps { data: { name: string; total: number; }[]; } export const Chart = ({ data }: ChartProps) => { return ( <Card> <ResponsiveContainer width=\"100%\" height={350}> <BarChart data={data}> <XAxis dataKey=\"name\" stroke=\"#888888\" tickLine={false} axisLine={false} /> <YAxis stroke=\"#888888\" tickLine={false} axisLine={false} tickFormatter={(value) => `$${value}`} /> <Bar dataKey=\"total\" fill=\"#8884d8\" barSize={20} radius={[4, 4, 4, 0]} /> </BarChart> </ResponsiveContainer> </Card> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\analytics\\_components", "filename": "data-card.tsx", "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\" import { formatPrice } from \"@/lib/format\"; interface DataCardProps { value: number; label: string; shouldFormat?: boolean; } export const DataCard = ({ value, label, shouldFormat = true, }: DataCardProps) => { return ( <Card> <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\"> <CardTitle> {label} </CardTitle> </CardHeader> <CardContent> <div className=\"text-2xl font-bold\"> {shouldFormat ? formatPrice(value) : value} </div> </CardContent> </Card> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses", "filename": "page.tsx", "content": "import { Button } from \"@/components/ui/button\"; import Link from \"next/link\"; import { DataTable } from \"./_components/data-table\"; import { columns } from \"./_components/columns\"; import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; const CoursesPage = async () => { const userId = auth(); if (!userId) { return redirect(\"/\"); } "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]", "filename": "page.tsx", "content": "import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { CircleDollarSign, File, LayoutDashboard, ListChecks } from \"lucide-react\"; import { db } from \"@/lib/db\"; import { IconBadge } from \"@/components/icon-badge\"; import { Banner } from \"@/components/banner\"; import { TitleForm } from \"./_components/title-form\"; import { DescriptionForm } from \"./_components/description-form\"; import { ImageForm } from \"./_components/image-form\"; import { CategoryForm } from \"./_components/category-form\"; import { PriceForm } from \"./_components/price-form\"; import { AttachmentForm } from \"./_components/attachment-form\"; import { ChaptersForm } from \"./_components/chapters-form\"; import { Actions } from \"./_components/actions\"; const CourseIdPage = async ({ params }: { params: { courseId: string } }) => { const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const course = await db.course.findUnique({ where: { id: params.courseId, userId }, include: { chapters: { orderBy: { position: \"asc\", }, }, attachments: { orderBy: { createdAt: \"desc\", }, }, }, }); const categories = await db.category.findMany({ orderBy: { name: \"asc\", }, }); if (!course) { return redirect(\"/\"); } const requiredFields = [ course.title, course.description, course.imageUrl, course.price, course.categoryId, course.chapters.some(chapter => chapter.isPublished), ]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields} / ${totalFields})`; const isComplete = requiredFields.every(Boolean); return ( <> {!course.isPublished && ( <Banner label=\"This course is unpublished. It will not be visible to the students.\" /> )} <div className=\"p-6\"> <div className=\"flex items-center justify-between\"> <div className=\"flex flex-col gap-y-2\"> <h1 className=\"text-2xl font-medium\"> Course setup </h1> <span className=\"text-sm text-slate-700\"> Complete all fields {completionText} </span> </div> <Actions disabled={!isComplete} courseId={params.courseId} isPublished={course.isPublished} /> </div> <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"> <div> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={LayoutDashboard} /> <h2 className=\"text-xl\"> Customize your course </h2> </div> <TitleForm initialData={course} courseId={course.id} /> <DescriptionForm initialData={course} courseId={course.id} /> <ImageForm initialData={course} courseId={course.id} /> <CategoryForm initialData={course} courseId={course.id} options={categories.map((category) => ({ label: category.name, value: category.id, }))} /> </div> <div className=\"space-y-6\"> <div> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={ListChecks} /> <h2 className=\"text-xl\"> Course chapters </h2> </div> <ChaptersForm initialData={course} courseId={course.id} /> </div> <div> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={CircleDollarSign} /> <h2 className=\"text-xl\"> Sell your course </h2> </div> <PriceForm initialData={course} courseId={course.id} /> </div> <div> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={File} /> <h2 className=\"text-xl\"> Resources & Attachments </h2> </div> <AttachmentForm initialData={course} courseId={course.id} /> </div> </div> </div> </div> </> ); } export default CourseIdPage;"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]", "filename": "page.tsx", "content": "import React from \"react\"; import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; import Link from \"next/link\"; import { ArrowLeft, Eye, LayoutDashboard, Video } from \"lucide-react\"; import { IconBadge } from \"@/components/icon-badge\"; import { ChapterTitleForm } from \"./_components/chatper-title-form\"; import { ChapterDescriptionForm } from \"./_components/chapter-description-form\"; import { ChapterAccessForm } from \"./_components/chapter-access-form\"; import { ChapterVideoForm } from \"./_components/chapter-video-form\"; import { Banner } from \"@/components/banner\"; import { ChapterActions } from \"./_components/chatper-actions\"; interface ChapterIdPageProps { params: { courseId: string; chapterId: string; }; } const ChapterIdPage: React.FC<ChapterIdPageProps> = async ({ params }) => { const { courseId, chapterId } = params; const { userId } = auth(); if (!userId) { return redirect(\"/\"); } const chapter = await db.chapter.findUnique({ where: { id: params.chapterId, courseId: params.courseId, }, include: { muxData: true, } }); if (!chapter) { return redirect(\"/\"); } const requiredFields = [ chapter.title, chapter.description, chapter.videoUrl, ] const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; const isComplete = requiredFields.every(Boolean); return ( <> {!chapter.isPublished && ( <Banner variant=\"warning\" label=\"This chapter is unpublished. It will not be visible in the course\" /> )} <div className=\"p-6\"> <div className=\"flex items-center justify-between\"> <div className=\"w-full\"> <Link href={`/teacher/courses/${params.courseId}`} className=\"flex items-center text-sm hover:opacity-75 transition mb-6\" > <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back to course setup </Link> <div className=\"flex items-center justify-between w-full\"> <div className=\"flex flex-col gap-y-2\"> <h1 className=\"text-2xl font-medium\">Chapter Creation</h1> </div> </div> <span className=\"text-sm text-slate-700 dark:text-slate-300 \"> Complete all fields {completionText} </span> </div> <ChapterActions disabled={!isComplete} courseId={params.courseId} chapterId={params.chapterId} isPublished={chapter.isPublished} /> </div> <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"> <div className=\"space-y-4\"> <div> <div className=\"flex items-ceenter gap-x-2\"> <IconBadge icon={LayoutDashboard} /> <h2 className=\"text-xl font-medium\">Customize your chapter</h2> </div> <ChapterTitleForm initialData={chapter} courseId={params.courseId} chapterId={params.chapterId} /> <ChapterDescriptionForm initialData={chapter} courseId={params.courseId} chapterId={params.chapterId} /> </div> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={Eye} /> <h2 className=\"text-xl font-medium\">Access Settings</h2> </div> <ChapterAccessForm initialData={chapter} courseId={params.courseId} chapterId={params.chapterId} /> </div> <div className=\"space-y-4\"> <div className=\"flex items-center gap-x-2\"> <IconBadge icon={Video} /> <h2 className=\"text-xl font-medium\">Add a video</h2> </div> <ChapterVideoForm initialData={chapter} courseId={params.courseId} chapterId={params.chapterId} /> </div> </div> </div> </> ); } export default ChapterIdPage;"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "chapter-access-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Chapter } from \"@prisma/client\"; import { Form, FormControl, FormDescription, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Textarea } from \"@/components/ui/textarea\"; import { Editor } from \"@/components/editor\"; import { Preview } from \"@/components/preview\"; import { Checkbox } from \"@/components/ui/checkbox\"; interface ChapterAccessFormProps { initialData: Chapter; courseId: string; chapterId: string; }; const formSchema = z.object({ isFree: z.boolean().default(false), }); export const ChapterAccessForm = ({ initialData, courseId, chapterId }: ChapterAccessFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { isFree: initialData?.isFree || false }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}`, values); toast.success(\"Chapter updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Chapter Access <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing ? ( <>Cancel</> ) : ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit chapter access </> )} </Button> </div> {!isEditing && ( <p className={cn( \"text-sm mt-2\", !initialData.isFree && \"text-slate-700 italic dark:text-slate-300\" )}> {initialData.isFree ? ( <>This chapter is available for free preview</> ) : ( <>This chapter is not free.</> )} </p> )} {isEditing && ( <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" > <FormField control={form.control} name=\"isFree\" render={({ field }) => ( <FormItem className=\"flex flex-row items-start space-x-3\"> <FormControl> <Checkbox checked={field.value} onCheckedChange = {field.onChange} /> </FormControl> <div className=\"space-y-1 leading-none\"> <FormDescription> Check this box if you want to make this chapter free for preview. </FormDescription> </div> </FormItem> )} /> <div className=\"flex items-center gap-x-2\"> <Button disabled={!isValid || isSubmitting} type=\"submit\" > Save </Button> </div> </form> </Form> )} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "chapter-description-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Chapter } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Textarea } from \"@/components/ui/textarea\"; import { Editor } from \"@/components/editor\"; import { Preview } from \"@/components/preview\"; interface ChapterDescriptionFormProps { initialData: Chapter; courseId: string; chapterId: string; }; const formSchema = z.object({ description: z.string().min(1), }); export const ChapterDescriptionForm = ({ initialData, courseId, chapterId }: ChapterDescriptionFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { description: initialData?.description || \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}`, values); toast.success(\"Chapter updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Chapter description <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing ? ( <>Cancel</> ) : ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit description </> )} </Button> </div> {!isEditing && ( <div className={cn( \"text-sm mt-2\", !initialData.description && \"text-slate-500 italic\" )}> {!initialData.description && \"No description\"} {initialData.description && ( <Preview value={initialData.description} /> )} </div> )} {isEditing && ( <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" > <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem> <FormControl> <Editor {...field} /> </FormControl> <FormMessage /> </FormItem> )} /> <div className=\"flex items-center gap-x-2\"> <Button disabled={!isValid || isSubmitting} type=\"submit\" > Save </Button> </div> </form> </Form> )} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "chapter-video-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import MuxPlayer from \"@mux/mux-player-react\"; import { Pencil, PlusCircle, Video } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Chapter, MuxData } from \"@prisma/client\"; import { Button } from \"@/components/ui/button\"; import { FileUpload } from \"@/components/file-upload\"; interface ChapterVideoFormProps { initialData: Chapter & { muxData?: MuxData | null }; courseId: string; chapterId: string; }; const formSchema = z.object({ videoUrl: z.string().min(1), }); export const ChapterVideoForm = ({ initialData, courseId, chapterId, }: ChapterVideoFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}`, values); toast.success(\"Chapter updated\"); toggleEdit(); "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "chatper-actions.tsx", "content": "\"use client\"; import { ConfirmModal } from \"@/components/modals/confirm-modal\"; import { Button } from \"@/components/ui/button\"; import axios from \"axios\"; import { Trash } from \"lucide-react\"; import { useRouter } from \"next/navigation\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; interface ChapterActionsProps { disabled: boolean; courseId: string; chapterId: string; isPublished: boolean; } export const ChapterActions = ({ disabled, courseId, chapterId, isPublished, }: ChapterActionsProps) => { const router = useRouter(); const [ isLoading, setIsLoading ] = useState(false); const onClick = async () => { try { setIsLoading(true); if (isPublished) { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}/unpublish`); toast.success(\"Chapter unpublished\"); } else { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}/publish`); toast.success(\"Chapter published\"); } router.refresh(); return; } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } const onDelete = async () => { try { setIsLoading(true); await axios.delete(`/api/courses/${courseId}/chapters/${chapterId}`); toast.success(\"Chapter deleted\"); router.refresh(); router.push(`/teacher/courses/${courseId}/chapters/${chapterId}`) } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } return ( <div className=\"flex items-center gap-x-2\"> <Button onClick={onClick} disabled={isLoading} variant=\"outline\" size=\"sm\" > {isPublished ? \"Unpublish\" : \"Publish\"} </Button> <ConfirmModal onConfirm={onDelete}> <Button disabled={isLoading}> <Trash className=\"h-4 w-4\" /> </Button> </ConfirmModal> </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\chapters\\[chapterId]\\_components", "filename": "chatper-title-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Input } from \"@/components/ui/input\"; import { Button } from \"@/components/ui/button\"; interface ChapterTitleFormProps { initialData: { title: string; }; courseId: string; chapterId: string; }; const formSchema = z.object({ title: z.string().min(1, { message: \"Title is required\", }), }); export const ChapterTitleForm = ({ initialData, courseId, chapterId }: ChapterTitleFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: initialData, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}/chapters/${chapterId}`, values); toast.success(\"Chapter title updated\"); toggleEdit(); router.refresh(); } catch (error : any) { if (error.response) { "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "actions.tsx", "content": "\"use client\"; import axios from \"axios\"; import { ConfirmModal } from \"@/components/modals/confirm-modal\"; import { useRouter } from \"next/navigation\"; import { useState } from \"react\"; import { Button } from \"@/components/ui/button\"; import { Trash } from \"lucide-react\"; import toast from \"react-hot-toast\"; import { useConfettiStore } from \"@/hooks/use-confetti-store\"; interface ActionsProps { disabled: boolean; courseId: string; isPublished: boolean; } export const Actions = ({ disabled, courseId, isPublished }: ActionsProps) => { const router = useRouter(); const confetti = useConfettiStore(); const [ isLoading, setIsLoading ] = useState(false); const onClick = async () => { try { setIsLoading(true); if (isPublished) { await axios.patch(`/api/courses/${courseId}/unpublish`); toast.success(\"Course unpublished\"); } else { await axios.patch(`/api/courses/${courseId}/publish`); toast.success(\"Course published\"); confetti.onOpen(); } router.refresh(); } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } const onDelete = async () => { try { setIsLoading(true); await axios.delete(`/api/courses/${courseId}`); toast.success(\"Course deleted\"); router.refresh(); router.push(`/teacher/courses`); } catch { toast.error(\"Something went wrong\"); } finally { setIsLoading(false); } } return ( <div className=\"flex items-center gap-x-2\"> <Button onClick={onClick} disabled={disabled || isLoading} variant=\"outline\" size=\"sm\" > {isPublished ? \"Unpublish\" : \"Publish\"} </Button> <ConfirmModal onConfirm={onDelete}> <Button size=\"sm\" disabled={isLoading}> <Trash className=\"h-4 w-4\" /> </Button> </ConfirmModal> </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "attachment-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { Pencil, PlusCircle, ImageIcon, File, Loader2, X } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Attachment, Course } from \"@prisma/client\"; import { Button } from \"@/components/ui/button\"; import { FileUpload } from \"@/components/file-upload\"; import { cn } from \"@/lib/utils\"; interface AttachmentFormProps { initialData: Course & { attachments?: Attachment[] }; courseId: string; } const formSchema = z.object({ url: z.string().min(1), originalFilename: z.string().min(1), }); export const AttachmentForm = ({ initialData, courseId, }: AttachmentFormProps) => { const [isEditing, setIsEditing] = useState(false); const [deletingId, setDeletingId] = useState<string | null>(null); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.post(`/api/courses/${courseId}/attachments`, values); toast.success(\"Course updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } }; const onDelete = async (id: string) => { try { setDeletingId(id); await axios.delete(`/api/courses/${courseId}/attachments/${id}`); toast.success(\"Attachment deleted\"); router.refresh(); } catch { toast.error(\"Something went wrong\"); } finally { setDeletingId(null); } }; return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800 dark:text-slate-300\"> <div className=\"font-medium flex items-center justify-between\"> Course attachments <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing && ( <>Cancel</> )} {!isEditing && ( <> <PlusCircle className=\"h-4 w-4 mr-2\" /> Add a file </> )} </Button> </div> {!isEditing && ( <> {initialData.attachments && initialData.attachments.length === 0 && ( <p className=\"text-sm mt-2 text-slate-500 italic\"> No attachments yet </p> )} {initialData.attachments && initialData.attachments.length > 0 && ( <div className=\"space-y-2\"> {initialData.attachments.map((attachment) => ( <div key={attachment.id} className=\"flex items-center p-3 w-full bg-sky-100 border-sky-200 border text-sky-700 rounded-md dark:bg-slate-700 dark:border-slate-600 dark:text-slate-300\" > <File className=\"h-4 w-4 mr-2 flex-shrink-0\" /> <a href={attachment.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-xs line-clamp-1 hover:underline\" > {attachment.name} </a> {deletingId === attachment.id && ( <div> <Loader2 className=\"h-4 w-4 animate-spin\" /> </div> )} {deletingId !== attachment.id && ( <button title=\"Delete attachment\" onClick={() => onDelete(attachment.id)} className=\"ml-auto hover:opacity-75 transition\" > <X className=\"h-4 w-4\" /> </button> )} </div> ))} </div> )} </> )} {isEditing && ( <div> <FileUpload endpoint=\"courseAttachment\" onChange={(url, originalFilename) => { if (url && originalFilename) { onSubmit({ url: url, originalFilename: originalFilename }); } }} /> <div className=\"text-xs text-muted-foreground mt-4\"> Add anything your students might need to complete the course. </div> </div> )} </div> ); };"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "category-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Course } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Textarea } from \"@/components/ui/textarea\"; import { Combobox } from \"@/components/ui/combobox\"; interface CategoryFormProps { initialData: Course; courseId: string; options: { label: string; value: string; }[]; } const formSchema = z.object({ categoryId: z.string().min(1), }); export const CategoryForm = ({ initialData, courseId, options }: CategoryFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { categoryId: initialData?.categoryId || \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}`, values); toast.success(\"Course updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "chapters-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Loader2, PlusCircle } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Chapter, Course } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Input } from \"@/components/ui/input\"; import { ChaptersList } from \"./chapters-list\"; interface ChaptersFormProps { initialData: Course & { chapters: Chapter[] }; courseId: string; }; const formSchema = z.object({ title: z.string().min(1), }); export const ChaptersForm = ({ initialData, courseId }: ChaptersFormProps) => { const [isCreating, setIsCreating] = useState(false); const [isUpdating, setIsUpdating] = useState(false); const toggleCreating = () => { setIsCreating((current) => !current); } const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { title: \"\", }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.post(`/api/courses/${courseId}/chapters`, values); toast.success(\"Chapter created\"); toggleCreating(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } const onReorder = async (updateData: { id: string; position: number }[]) => { try { setIsUpdating(true); await axios.put(`/api/courses/${courseId}/chapters/reorder`, { list: updateData }); toast.success(\"Chapters reordered\"); router.refresh(); } catch { toast.error(\"Something went wrong\"); } finally { setIsUpdating(false); } } const onEdit = (id: string) => { router.push(`/teacher/courses/${courseId}/chapters/${id}`); } return ( <div className=\"relative mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> {isUpdating && ( <div className=\"absolute h-full w-full bg-slate-500/20 top-0 right-0 rounded-m flex items-center justify-center\"> <Loader2 className=\"animate-spin h-6 w-6 text-sky-700\" /> </div> )} <div className=\"font-medium flex items-center justify-between\"> Course chapters <Button onClick={toggleCreating} variant=\"ghost\"> {isCreating ? ( <>Cancel</> ) : ( <> <PlusCircle className=\"h-4 w-4 mr-2\" /> Add a chapter </> )} </Button> </div> {isCreating && ( <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" > <FormField control={form.control} name=\"title\" render={({ field }) => ( <FormItem> <FormControl> <Input disabled={isSubmitting} placeholder=\"e.g. 'Introduction to the course'\" {...field} /> </FormControl> <FormMessage /> </FormItem> )} /> <Button disabled={!isValid || isSubmitting} type=\"submit\" > Create </Button> </form> </Form> )} {!isCreating && ( <div className={cn( \"text-sm mt-2\", !initialData.chapters.length && \"text-slate-500 italic\" )}> {!initialData.chapters.length && \"No chapters\"} <ChaptersList onEdit={onEdit} onReorder={onReorder} items={initialData.chapters || []} /> </div> )} {!isCreating && ( <p className=\"text-xs text-muted-foreground mt-4\"> Drag and drop to reorder the chapters </p> )} </div> ) } export default ChaptersForm;"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "chapters-list.tsx", "content": "\"use client\"; import { Chapter } from \"@prisma/client\"; import { useEffect, useState } from \"react\"; import { DragDropContext, Droppable, Draggable, DropResult, } from \"@hello-pangea/dnd\"; import { Grip, Pencil } from \"lucide-react\"; import { cn } from \"@/lib/utils\"; import { Badge } from \"@/components/ui/badge\"; interface ChaptersListProps { items: Chapter[]; onReorder: (updateData: { id: string; position: number }[]) => void; onEdit: (id: string) => void; }; export const ChaptersList = ({ items, onReorder, onEdit }: ChaptersListProps) => { const [isMounted, setIsMounted] = useState(false); const [chapters, setChapters] = useState(items); useEffect(() => { setIsMounted(true); }, []); useEffect(() => { setChapters(items); }, [items]); const onDragEnd = (result: DropResult) => { if (!result.destination) return; const items = Array.from(chapters); const [reorderedItem] = items.splice(result.source.index, 1); items.splice(result.destination.index, 0, reorderedItem); const startIndex = Math.min(result.source.index, result.destination.index); const endIndex = Math.max(result.source.index, result.destination.index); const updatedChapters = items.slice(startIndex, endIndex + 1); setChapters(items); const bulkUpdateData = updatedChapters.map((chapter) => ({ id: chapter.id, position: items.findIndex((item) => item.id === chapter.id) })); onReorder(bulkUpdateData); } if (!isMounted) { return null; } return ( <DragDropContext onDragEnd={onDragEnd}> <Droppable droppableId=\"chapters\"> {(provided) => ( <div {...provided.droppableProps} ref={provided.innerRef}> {chapters.map((chapter, index) => ( <Draggable key={chapter.id} draggableId={chapter.id} index={index} > {(provided) => ( <div className={`flex items-center gap-x-2 bg-gray-200 border-gray-200 border text-gray-700 rounded-md mb-4 text-sm ${chapter.isPublished && \"bg-blue-100 border-blue-200 text-blue-700\"} dark:bg-slate-700 dark:border-slate-600 dark:text-slate-300 dark:${chapter.isPublished && \"bg-blue-800 border-blue-600 text-blue-300\"} `} ref={provided.innerRef} {...provided.draggableProps} > <div className={`px-2 py-3 border-r border-r-gray-200 hover:bg-gray-300 rounded-l-md transition ${chapter.isPublished && \"border-r-blue-200 hover:bg-blue-200\"} dark:border-r-slate-800 dark:hover:bg-slate-700 dark:${chapter.isPublished && \"border-r-blue-600 hover:bg-blue-800\"} `} {...provided.dragHandleProps} > <Grip className=\"h-5 w-5\" /> </div> {chapter.title} <div className=\"ml-auto pr-2 flex items-center gap-x-2\"> {chapter.isFree && ( <Badge> Free </Badge> )} <Badge className={`bg-gray-500 ${chapter.isPublished && \"bg-sky-700\"} dark:bg-slate-500 dark:${chapter.isPublished && \"bg-sky-700\"} `} > {chapter.isPublished ? \"Published\" : \"Draft\"} </Badge> <Pencil onClick={() => onEdit(chapter.id)} className=\"w-4 h-4 cursor-pointer hover:opacity-75 transition\" /> </div> </div> )} </Draggable> ))} {provided.placeholder} </div> )} </Droppable> </DragDropContext> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "description-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Course } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Textarea } from \"@/components/ui/textarea\"; import { Editor } from \"@/components/editor\"; import { Preview } from \"@/components/preview\"; interface DescriptionFormProps { initialData: Course; courseId: string; }; const formSchema = z.object({ description: z.string().min(1, { message: \"Description is required\", }), }); export const DescriptionForm = ({ initialData, courseId }: DescriptionFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { description: initialData?.description || \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}`, values); toast.success(\"Course updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Course description <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing ? ( <>Cancel</> ) : ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit description </> )} </Button> </div> {!isEditing && ( <div className={cn( \"text-sm mt-2\", !initialData.description && \"text-slate-500 italic\" )}> {!initialData.description && \"No description\"} {initialData.description && ( <Preview value={initialData.description} /> )} </div> )} {isEditing && ( <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" > <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem> <FormControl> <Editor {...field} /> </FormControl> <FormMessage /> </FormItem> )} /> <div className=\"flex items-center gap-x-2\"> <Button disabled={!isValid || isSubmitting} type=\"submit\" > Save </Button> </div> </form> </Form> )} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "image-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { Pencil, PlusCircle, ImageIcon, Upload } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Course } from \"@prisma/client\"; import Image from \"next/image\"; import { Button } from \"@/components/ui/button\"; import { FileUpload } from \"@/components/file-upload\"; interface ImageFormProps { initialData: Course courseId: string; }; const formSchema = z.object({ imageUrl: z.string().min(1, { message: \"Image is required\", }), }); export const ImageForm = ({ initialData, courseId }: ImageFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}`, values); toast.success(\"Course updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Course image <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing && ( <>Cancel</> )} {!isEditing && !initialData.imageUrl && ( <> <PlusCircle className=\"h-4 w-4 mr-2\" /> Add an image </> )} {!isEditing && initialData.imageUrl && ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit image </> )} </Button> </div> {!isEditing && ( !initialData.imageUrl ? ( <div className=\"flex items-center justify-center h-60 bg-slate-200 rounded-md\"> <ImageIcon className=\"h-10 w-10 text-slate-500\" /> </div> ) : ( <div className=\"relative aspect-video mt-2\"> <Image alt=\"Upload\" fill className=\"object-cover rounded-md\" src={initialData.imageUrl} /> </div> ) )} {isEditing && ( <div> <FileUpload endpoint=\"courseImage\" onChange={(url) => { if (url) { onSubmit({ imageUrl: url }); } }} /> <div className=\"text-xs text-muted-foreground mt-4\"> 16:9 aspect ratio recommended </div> </div> )} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "price-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Course } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Input } from \"@/components/ui/input\"; import { formatPrice } from \"@/lib/format\"; interface PriceFormProps { initialData: Course; courseId: string; }; const formSchema = z.object({ price: z.coerce.number(), }); export default function PriceForm({ initialData, courseId }: PriceFormProps) { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { price: initialData?.price || undefined }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}`, values); toast.success(\"Course updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Course price <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing ? ( <>Cancel</> ) : ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit price </> )} </Button> </div> {!isEditing && ( <p className={cn( \"text-sm mt-2\", !initialData.price && \"text-slate-500 italic\" )}> {initialData.price ? formatPrice(initialData.price) : \"No price set\" } </p> )} {isEditing && ( <Form {...form}> <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\" > <FormField control={form.control} name=\"price\" render={({ field }) => ( <FormItem> <FormControl> <Input type=\"number\" step=\"0.01\" disabled={isSubmitting} placeholder=\"Set a price for your course\" {...field} /> </FormControl> <FormMessage /> </FormItem> )} /> <div className=\"flex items-center gap-x-2\"> <Button disabled={!isValid || isSubmitting} type=\"submit\" > Save </Button> </div> </form> </Form> )} </div> ) } export { PriceForm };"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\[courseId]\\_components", "filename": "title-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Input } from \"@/components/ui/input\"; import { Button } from \"@/components/ui/button\"; interface TitleFormProps { initialData: { title: string; }; courseId: string; }; const formSchema = z.object({ title: z.string().min(1, { message: \"Title is required\", }), }); export const TitleForm = ({ initialData, courseId }: TitleFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: initialData, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/courses/${courseId}`, values); toast.success(\"Course title updated\"); toggleEdit(); router.refresh(); } catch (error : any) { if (error.response) { "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\_components", "filename": "columns.tsx", "content": "\"use client\" import { Course } from \"@prisma/client\" import { ColumnDef } from \"@tanstack/react-table\" import { ArrowUpDown, MoreHorizontal, Pencil } from \"lucide-react\" import Link from \"next/link\"; import { Button } from \"@/components/ui/button\"; import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"; import { Badge } from \"@/components/ui/badge\"; import { cn } from \"@/lib/utils\"; "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\courses\\_components", "filename": "data-table.tsx", "content": "\"use client\" import * as React from \"react\" import { ColumnDef, ColumnFiltersState, SortingState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable, } from \"@tanstack/react-table\" import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from \"@/components/ui/table\" import { Button } from \"@/components/ui/button\" import { Input } from \"@/components/ui/input\" import Link from \"next/link\" import { PlusCircle } from \"lucide-react\" interface DataTableProps<TData, TValue> { columns: ColumnDef<TData, TValue>[] data: TData[] } export function DataTable<TData, TValue>({ columns, data, }: DataTableProps<TData, TValue>) { const [sorting, setSorting] = React.useState<SortingState>([]) const [ columnFilters, setColumnFilters ] = React.useState<ColumnFiltersState>([]); const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), onColumnFiltersChange: setColumnFilters, getFilteredRowModel: getFilteredRowModel(), state: { sorting, columnFilters, }, }) return ( <div> <div className=\"flex items-center py-4 justify-between\"> <Input placeholder=\"Filter courses...\" value={(table.getColumn(\"title\")?.getFilterValue() as string) ?? \"\"} onChange={(event) => table.getColumn(\"title\")?.setFilterValue(event.target.value) } className=\"max-w-sm\" /> <Link href=\"/teacher/create\"> <Button variant=\"outline\" size=\"sm\"> <PlusCircle className=\"h-4 w-4 mr-2\"/>New Course </Button> </Link> </div> <div className=\"rounded-md border\"> <Table> <TableHeader> {table.getHeaderGroups().map((headerGroup) => ( <TableRow key={headerGroup.id}> {headerGroup.headers.map((header) => { return ( <TableHead key={header.id}> {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} </TableHead> ) })} </TableRow> ))} </TableHeader> <TableBody> {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) => ( <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"} > {row.getVisibleCells().map((cell) => ( <TableCell key={cell.id}> {flexRender(cell.column.columnDef.cell, cell.getContext())} </TableCell> ))} </TableRow> )) ) : ( <TableRow> <TableCell colSpan={columns.length} className=\"h-24 text-center\"> No results. </TableCell> </TableRow> )} </TableBody> </Table> </div> <div className=\"flex items-center justify-end space-x-2 py-4\"> <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()} > Previous </Button> <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()} > Next </Button> </div> </div> ) } "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\create", "filename": "page.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { useRouter } from \"next/navigation\"; import { Form, FormControl, FormDescription, FormField, FormLabel, FormMessage, FormItem, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { Input } from \"@/components/ui/input\"; import Link from \"next/link\"; import toast from \"react-hot-toast\"; const formSchema = z.object({ title: z.string().min(1, { message: \"Title is required\" }), }) const CreatePage = () => { const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { title: \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users", "filename": "page.tsx", "content": "import { DataTable } from \"./_components/data-table\"; import { columns } from \"./_components/columns\"; import { db } from \"@/lib/db\"; const UsersPage = async () => { "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users\\[id]", "filename": "page.tsx", "content": "import React from \"react\"; import { auth } from \"@clerk/nextjs\"; import { redirect } from \"next/navigation\"; import { db } from \"@/lib/db\"; import Link from \"next/link\"; import { ArrowLeft, LayoutDashboard, Eye, Video } from \"lucide-react\"; import { IconBadge } from \"@/components/icon-badge\"; import { ImageForm } from \"./_components/image-form\"; import { MemberRoleForm } from \"./_components/member-role-form\"; interface ProfileIdPageProps { params: { id: string; }; } const ProfileIdPage: React.FC<ProfileIdPageProps> = async ({ params }) => { const { id } = params; const { userId: currentUserId } = auth(); if (!currentUserId) { return redirect(\"/teacher/users/\"); } const profile = await db.profile.findUnique({ where: { id: params.id, }, }); if (!profile) { return redirect(\"/teacher/users/\"); } const requiredFields = [profile.imageUrl, profile.role]; const totalFields = requiredFields.length; const completedFields = requiredFields.filter(Boolean).length; const completionText = `(${completedFields}/${totalFields})`; const isComplete = requiredFields.every(Boolean); return ( <> <div className=\"p-6\"> <div className=\"flex items-center justify-between\"> <div className=\"w-full\"> <Link href={`/teacher/users/`} className=\"flex items-center text-sm hover:opacity-75 transition mb-6\" > <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back to user list </Link> <div className=\"flex items-center justify-between w-full\"> <div className=\"flex flex-col gap-y-2\"> <h1 className=\"text-2xl font-medium\">Profile Management</h1> </div> </div> <span className=\"text-sm text-slate-700 dark:text-slate-300 \"> Complete all fields {completionText} </span> </div> </div> <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-16\"> <div className=\"space-y-4\"> <div> <div className=\"flex items-ceenter gap-x-2\"> <IconBadge icon={LayoutDashboard} /> <h2 className=\"text-xl font-medium\">Customize your profile</h2> </div> <ImageForm initialData={profile} id={params.id} /> <MemberRoleForm initialData={profile} id={params.id} /> </div> </div> </div> </div> </> ); }; export default ProfileIdPage;"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users\\[id]\\_components", "filename": "image-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { Pencil, PlusCircle, ImageIcon, Upload } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { Profile } from \"@prisma/client\"; import Image from \"next/image\"; import { Button } from \"@/components/ui/button\"; import { FileUpload } from \"@/components/file-upload\"; interface ImageFormProps { initialData: Profile id: string; }; const formSchema = z.object({ imageUrl: z.string().min(1, { message: \"Image is required\", }), }); export const ImageForm = ({ initialData, id }: ImageFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/profile/${id}`, values); toast.success(\"Profile updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } return ( <div className=\"mt-6 border bg-slate-100 rounded-md p-4 dark:bg-gray-800\"> <div className=\"font-medium flex items-center justify-between\"> Profile image <Button onClick={toggleEdit} variant=\"ghost\"> {isEditing && ( <>Cancel</> )} {!isEditing && !initialData.imageUrl && ( <> <PlusCircle className=\"h-4 w-4 mr-2\" /> Add an image </> )} {!isEditing && initialData.imageUrl && ( <> <Pencil className=\"h-4 w-4 mr-2\" /> Edit image </> )} </Button> </div> {!isEditing && ( !initialData.imageUrl ? ( <div className=\"flex items-center justify-center h-60 bg-slate-200 rounded-md\"> <ImageIcon className=\"h-10 w-10 text-slate-500\" /> </div> ) : ( <div className=\"relative aspect-video mt-2\"> <Image alt=\"Upload\" fill className=\"object-cover rounded-md\" src={initialData.imageUrl} /> </div> ) )} {isEditing && ( <div> <FileUpload endpoint=\"profileImage\" onChange={(url) => { if (url) { onSubmit({ imageUrl: url }); } }} /> <div className=\"text-xs text-muted-foreground mt-4\"> 16:9 aspect ratio recommended </div> </div> )} </div> ) }"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users\\[id]\\_components", "filename": "member-role-form.tsx", "content": "\"use client\"; import * as z from \"zod\"; import axios from \"axios\"; import { zodResolver } from \"@hookform/resolvers/zod\"; import { useForm } from \"react-hook-form\"; import { Pencil } from \"lucide-react\"; import { useState } from \"react\"; import toast from \"react-hot-toast\"; import { useRouter } from \"next/navigation\"; import { MemberRole, Profile } from \"@prisma/client\"; import { Form, FormControl, FormField, FormItem, FormMessage, } from \"@/components/ui/form\"; import { Button } from \"@/components/ui/button\"; import { cn } from \"@/lib/utils\"; import { Textarea } from \"@/components/ui/textarea\"; import { Combobox } from \"@/components/ui/combobox\"; interface MemberRoleFormProps { initialData: Profile; id: string; } const formSchema = z.object({ role: z.string().min(1), }); const options = Object.values(MemberRole).map((role) => ({ label: role, value: role, })); export const MemberRoleForm = ({ initialData, id, }: MemberRoleFormProps) => { const [isEditing, setIsEditing] = useState(false); const toggleEdit = () => setIsEditing((current) => !current); const router = useRouter(); const form = useForm<z.infer<typeof formSchema>>({ resolver: zodResolver(formSchema), defaultValues: { role: initialData?.role || \"\" }, }); const { isSubmitting, isValid } = form.formState; const onSubmit = async (values: z.infer<typeof formSchema>) => { try { await axios.patch(`/api/profile/${id}`, values); toast.success(\"Profile updated\"); toggleEdit(); router.refresh(); } catch { toast.error(\"Something went wrong\"); } } "}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users\\_components", "filename": "columns.tsx", "content": "\"use client\" import { Course } from \"@prisma/client\" import { ColumnDef } from \"@tanstack/react-table\" import { ArrowUpDown, MoreHorizontal, Pencil } from \"lucide-react\" import Link from \"next/link\"; import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"; import { Badge } from \"@/components/ui/badge\"; import { cn } from \"@/lib/utils\"; import { Profile } from \"@prisma/client\"; import { Button } from \"@/components/ui/button\"; export const columns: ColumnDef<Profile, keyof Profile>[] = [ { accessorKey: \"name\", header: ({ column }) => { return ( <Button variant=\"ghost\" onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}> Name {column.getIsSorted() === \"asc\" ? <ArrowUpDown className=\"h-4 w-4 ml-2\" /> : null} </Button> ); }, }, { accessorKey: \"email\", header: ({ column }) => { return ( <Button variant=\"ghost\" onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}> Email {column.getIsSorted() === \"asc\" ? <ArrowUpDown className=\"h-4 w-4 ml-2\" /> : null} </Button> ); }, }, { accessorKey: \"role\", header: ({ column }) => { return ( <Button variant=\"ghost\" onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}> Role {column.getIsSorted() === \"asc\" ? <ArrowUpDown className=\"h-4 w-4 ml-2\" /> : null} </Button> ); }, cell: ({ row }) => { const role = row.getValue(\"role\"); const badgeColor = role === \"ADMIN\" ? \"green\" : role === \"TEACHER\" ? \"blue\" : \"gray\"; return typeof role === \"string\" ? <Badge color={badgeColor}>{role}</Badge> : null; }, }, { id: \"actions\", cell: ({ row }) => { const { id } = row.original; return ( <DropdownMenu> <DropdownMenuTrigger> <Button variant=\"ghost\"> <MoreHorizontal className=\"h-4 w-4\" /> </Button> </DropdownMenuTrigger> <DropdownMenuContent> <Link href={`/teacher/users/${id}`}> <DropdownMenuItem> <Pencil className=\"h-4 w-4 mr-2\" /> Edit </DropdownMenuItem> </Link> </DropdownMenuContent> </DropdownMenu> ); }, }, ];"}, {"path": ".\\app\\(dashboard)\\(routes)\\teacher\\users\\_components", "filename": "data-table.tsx", "content": "\"use client\" import * as React from \"react\"; import { ColumnDef, ColumnFiltersState, SortingState, flexRender, getCoreRowModel, getFilteredRowModel, getPaginationRowModel, getSortedRowModel, useReactTable } from \"@tanstack/react-table\"; import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"; import { Button } from \"@/components/ui/button\"; import { Input } from \"@/components/ui/input\"; import Link from \"next/link\"; import { PlusCircle } from \"lucide-react\"; interface DataTableProps<TData, TValue> { columns: ColumnDef<TData, TValue>[]; data: TData[]; } export function DataTable<TData, TValue>({ columns, data }: DataTableProps<TData, TValue>) { const [sorting, setSorting] = React.useState<SortingState>([]); const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]); const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), getPaginationRowModel: getPaginationRowModel(), onSortingChange: setSorting, getSortedRowModel: getSortedRowModel(), onColumnFiltersChange: setColumnFilters, getFilteredRowModel: getFilteredRowModel(), state: { sorting, columnFilters, }, }); return ( <div> <div className=\"flex items-center py-4 justify-between\"> <Input placeholder=\"Filter users...\" value={(table.getColumn(\"name\")?.getFilterValue() as string) ?? \"\"} onChange={(event) => table.getColumn(\"name\")?.setFilterValue(event.target.value)} className=\"max-w-sm\" /> </div> <div className=\"rounded-md border\"> <Table> <TableHeader> {table.getHeaderGroups().map((headerGroup) => ( <TableRow key={headerGroup.id}> {headerGroup.headers.map((header) => { return ( <TableHead key={header.id}> {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())} </TableHead> ); })} </TableRow> ))} </TableHeader> <TableBody> {table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) => ( <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}> {row.getVisibleCells().map((cell) => ( <TableCell key={cell.id}> {flexRender(cell.column.columnDef.cell, cell.getContext())} </TableCell> ))} </TableRow> )) ) : ( <TableRow> <TableCell colSpan={columns.length} className=\"h-24 text-center\"> No results. </TableCell> </TableRow> )} </TableBody> </Table> </div> <div className=\"flex items-center justify-end space-x-2 py-4\"> <Button variant=\"outline\" size=\"sm\" onClick={() => table.previousPage()} disabled={!table.getCanPreviousPage()} > Previous </Button> <Button variant=\"outline\" size=\"sm\" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()} > Next </Button> </div> </div> ); }"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "info-card.tsx", "content": "import React from 'react'; import { IconBadge } from '@/components/icon-badge'; import { Icon } from 'next/dist/lib/metadata/types/metadata-types'; import { LucideIcon } from 'lucide-react'; interface InfoCardProps { numberOfItems: number; variant?: 'default' | 'success'; label: string; icon: LucideIcon; } const InfoCard = ({ icon: Icon, label, numberOfItems, variant }: InfoCardProps) => { return ( <div className='border rounded-md flex items-center gap-x-2 p-3'> <IconBadge variant={variant} icon={Icon} /> <div> <p className='font-medium'> {label} </p> <p className='text-sm text-gray-500'> {numberOfItems} courses </p> </div> </div> ); }; export default InfoCard;"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "logo.tsx", "content": "import Link from \"next/link\" import Image from \"next/image\" export const Logo = () => { return ( <> <Link href=\"/\"> <Image src=\"/logo.svg\" alt=\"Logo\" width={130} height={130} /> </Link> </> ) }"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "mobile-sidebar.tsx", "content": "import { Sheet, SheetContent, SheetTrigger, } from \"@/components/ui/sheet\" import { Menu } from \"lucide-react\"; import { Sidebar } from \"./Sidebar\"; export const MobileSidebar = () => { return ( <Sheet> <SheetTrigger className=\"md:hidden pr-4 hover:opacity-75 transition\"> <Menu /> </SheetTrigger> <SheetContent side=\"left\" className=\"p-0\"> <Sidebar /> </SheetContent> </Sheet> ) }"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "navbar.tsx", "content": "\"use client\"; import { NavbarRoutes } from \"@/components/navbar-routes\" import { MobileSidebar } from \"./mobile-sidebar\" import { SafeProfile } from \"@/types\"; interface NavbarProps { currentProfile?: SafeProfile | null } export const Navbar : React.FC<NavbarProps> = ({ currentProfile }) => { return ( <div className=\"p-4 border-b h-full flex items-center bg-white dark:bg-gray-900 text-gray-900 dark:text-white shadow-sm\"> <MobileSidebar /> <NavbarRoutes currentProfile={currentProfile}/> </div> ) }"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "sidebar-item.tsx", "content": "\"use client\"; import { cn } from \"@/lib/utils\"; import { LucideIcon } from \"lucide-react\"; import { useRouter, usePathname } from \"next/navigation\"; interface SidebarItemProps { icon: LucideIcon; label: string; href: string; }; const SidebarItem = ({ icon: Icon, label, href, }: SidebarItemProps) => { const pathname = usePathname(); const router = useRouter(); "}, {"path": ".\\app\\(dashboard)\\_components", "filename": "sidebar-routes.tsx", "content": "\"use client\"; import { Layout, Compass, List, BarChart, Users } from \"lucide-react\"; import SidebarItem from \"./sidebar-item\"; import { usePathname } from \"next/navigation\"; const STUDENTRoutes = [ { icon: Layout, label: \"Dashboard\", href: \"/\", }, { icon: Compass, label: \"Browse\", href: \"/search\", } ] const teacherRoutes = [ { icon: List, label: \"Courses\", href: \"/teacher/courses\", }, { icon: BarChart, label: \"Analytics\", href: \"/teacher/analytics\", }, { icon: Users, label: \"Manage Users\", href: \"/teacher/users\", } ] export const SidebarRoutes = () => { const pathname = usePathname(); const isTeacherPage = pathname?.startsWith(\"/teacher\"); const routes = isTeacherPage ? teacherRoutes : STUDENTRoutes; return ( <div className=\"flex flex-col w-full\"> {routes.map((route, index) => ( <SidebarItem key={index} icon={route.icon} label={route.label} href={route.href} /> ))} </div> ) }"}, {"path": ".\\app\\(dashboard)\\_components", "filename": "Sidebar.tsx", "content": "\"use client\"; import { Logo } from \"./logo\" import { SidebarRoutes } from \"./sidebar-routes\" export const Sidebar = () => { return ( <div className={`h-full border-r flex flex-col overflow-y-auto bg-white text-gray-900 shadow-sm dark:bg-gray-900 dark:text-white`}> <div className=\"p-6\"> <Logo /> </div> <div className=\"flex flex-col w-full\"> <SidebarRoutes /> </div> </div> ) }"}, {"path": ".\\app\\api\\courses", "filename": "route.ts", "content": "import { db } from \"@/lib/db\"; import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; export async function POST( req: Request, ) { try { const { userId } = auth(); const { title } = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const course = await db.course.create({ data: { userId, title, }, }); return NextResponse.json(course); } catch (error) { console.log(\"[COURSES]\", error); return new NextResponse(\"Internal Server Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]", "filename": "route.ts", "content": "import { db } from \"@/lib/db\"; import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; export async function PATCH( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); const { courseId } = params; const values = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const course = await db.course.update({ where: { id: courseId, userId, }, data: { ...values, }, }); return NextResponse.json(course); } catch (error) { console.log(\"[COURSE_ID]\", error); return new NextResponse(\"Internal Server Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]\\attachments", "filename": "route.ts", "content": "import { db } from \"@/lib/db\"; import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; export async function POST( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); const { url, originalFilename } = await req.json(); console.log(\"COURSE_ID_ATTACHMENTS\", url, params.courseId); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const courseOwner = await db.course.findUnique({ where: { id: params.courseId, userId: userId, }, }); if (!courseOwner) { return new NextResponse(\"Unauthorized\", { status: 401 }); } var name = url ? url.split(\"/\").pop() : \"Untitled\"; if (originalFilename) { name = originalFilename } const attachment = await db.attachment.create({ data: { url, name, courseId: params.courseId, }, }); return NextResponse.json(attachment); } catch (error) { console.log(\"COURSE_ID_ATTACHMENTS\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]\\attachments\\[attachmentId]", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function DELETE( req: Request, { params }: { params: { courseId: string, attachmentId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const courseOwner = await db.course.findUnique({ where: { id: params.courseId, userId: userId } }); if (!courseOwner) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const attachment = await db.attachment.delete({ where: { courseId: params.courseId, id: params.attachmentId, } }); return NextResponse.json(attachment); } catch (error) { console.log(\"ATTACHMENT_ID\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function POST( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); const { title } = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const courseOwner = await db.course.findUnique({ where: { id: params.courseId, userId: userId, } }); if (!courseOwner) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const lastChapter = await db.chapter.findFirst({ where: { courseId: params.courseId, }, orderBy: { position: \"desc\", }, }); const newPosition = lastChapter ? lastChapter.position + 1 : 1; const chapter = await db.chapter.create({ data: { title, courseId: params.courseId, position: newPosition, } }); return NextResponse.json(chapter); } catch (error) { console.log(\"[CHAPTERS]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters\\reorder", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PUT( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const { list } = await req.json(); const ownCourse = await db.course.findUnique({ where: { id: params.courseId, userId: userId, }, }); if (!ownCourse) { return new NextResponse(\"Unauthorized\", { status: 401 }); } for (let item of list) { await db.chapter.update({ where: { id: item.id }, data: { position: item.position }, }); } return new NextResponse(\"Success\", { status: 200 }); } catch (error) { console.log(\"[REORDER]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters\\[chapterId]", "filename": "route.ts", "content": "import Mux from \"@mux/mux-node\"; import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; const { Video } = new Mux( process.env.MUX_TOKEN_ID!, process.env.MUX_TOKEN_SECRET!, ); export async function DELETE( req: Request, { params }: { params: { courseId: string; chapterId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const ownCourse = await db.course.findUnique({ where: { id: params.courseId, userId, } }); if (!ownCourse) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const chapter = await db.chapter.findUnique({ where: { id: params.chapterId, courseId: params.courseId, } }); if (!chapter) { return new NextResponse(\"Not Found\", { status: 404 }); } if (chapter.videoUrl) { const existingMuxData = await db.muxData.findFirst({ where: { chapterId: params.chapterId, } }); if (existingMuxData) { await Video.Assets.del(existingMuxData.assetId); await db.muxData.delete({ where: { id: existingMuxData.id, } }); } } const deletedChapter = await db.chapter.delete({ where: { id: params.chapterId } }); const publishedChaptersInCourse = await db.chapter.findMany({ where: { courseId: params.courseId, isPublished: true, } }); if (!publishedChaptersInCourse.length) { await db.course.update({ where: { id: params.courseId, }, data: { isPublished: false, } }); } return NextResponse.json(deletedChapter); } catch (error) { console.log(\"[CHAPTER_ID_DELETE]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } } export async function PATCH( req: Request, { params }: { params: { courseId: string; chapterId: string } } ) { try { const { userId } = auth(); const { isPublished, ...values } = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const ownCourse = await db.course.findUnique({ where: { id: params.courseId, userId } }); if (!ownCourse) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const chapter = await db.chapter.update({ where: { id: params.chapterId, courseId: params.courseId, }, data: { ...values, } }); if (values.videoUrl) { const existingMuxData = await db.muxData.findFirst({ where: { chapterId: params.chapterId, } }); if (existingMuxData) { try { await Video.Assets.del(existingMuxData.assetId); } catch (error) { console.log(\"[Mux Asset Delete]\", error); } await db.muxData.delete({ where: { id: existingMuxData.id, } }); } try { const asset = await Video.Assets.create({ input: values.videoUrl, playback_policy: \"public\", test: false, }); if (asset) { await db.muxData.create({ data: { chapterId: params.chapterId, assetId: asset.id, playbackId: asset.playback_ids?.[0]?.id, } }); } } catch (error) { console.log(\"[Mux Asset Create]\", error); } } return NextResponse.json(chapter); } catch (error) { console.log(\"[COURSES_CHAPTER_ID]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters\\[chapterId]\\progress", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PUT( req: Request, { params }: { params: { courseId: string; chapterId: string } } ) { try { const { userId } = auth(); const { isCompleted } = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const userProgress = await db.userProgress.upsert({ where: { userId_chapterId: { userId, chapterId: params.chapterId, } }, update: { isCompleted }, create: { userId, chapterId: params.chapterId, isCompleted, } }) return NextResponse.json(userProgress); } catch (error) { console.log(\"[CHAPTER_ID_PROGRESS]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters\\[chapterId]\\publish", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PATCH( req: Request, { params }: { params: { courseId: string; chapterId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const ownCourse = await db.course.findUnique({ where: { id: params.courseId, userId } }); if (!ownCourse) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const chapter = await db.chapter.findUnique({ where: { id: params.chapterId, courseId: params.courseId, } }); const muxData = await db.muxData.findUnique({ where: { chapterId: params.chapterId, } }); if (!chapter || !muxData || !chapter.title || !chapter.description || !chapter.videoUrl) { return new NextResponse(\"Missing required fields\", { status: 400 }); } const publishedChapter = await db.chapter.update({ where: { id: params.chapterId, courseId: params.courseId, }, data: { isPublished: true, } }); return NextResponse.json(publishedChapter); } catch (error) { console.log(\"[CHAPTER_PUBLISH]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\courses\\[courseId]\\chapters\\[chapterId]\\unpublish", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PATCH( req: Request, { params }: { params: { courseId: string; chapterId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const ownCourse = await db.course.findUnique({ where: { id: params.courseId, userId, }, }); if (!ownCourse) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const unpublishedChapter = await db.chapter.update({ where: { id: params.chapterId, courseId: params.courseId, }, data: { isPublished: false, }, }); const publishedChaptersInCourse = await db.chapter.findMany({ where: { courseId: params.courseId, isPublished: true, }, }); if (!publishedChaptersInCourse.length) { await db.course.update({ where: { id: params.courseId, }, data: { isPublished: false, }, }); } return NextResponse.json(unpublishedChapter); } catch (error) { console.log(\"[CHAPTER_UNPUBLISH]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } } "}, {"path": ".\\app\\api\\courses\\[courseId]\\checkout", "filename": "route.ts", "content": "import { db } from \"@/lib/db\"; import { currentUser } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import Stripe from \"stripe\"; import { stripe } from \"@/lib/stripe\"; export async function POST( req: Request, { params }: { params: { courseId: string } } ) { try { "}, {"path": ".\\app\\api\\courses\\[courseId]\\publish", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PATCH( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const course = await db.course.findUnique({ where: { id: params.courseId, userId, }, include: { chapters: { include: { muxData: true, } } } }); if (!course) { return new NextResponse(\"Not found\", { status: 404 }); } const hasPublishedChapter = course.chapters.some((chapter) => chapter.isPublished); if (!course.title || !course.description || !course.imageUrl || !course.categoryId || !hasPublishedChapter) { return new NextResponse(\"Missing required fields\", { status: 401 }); } const publishedCourse = await db.course.update({ where: { id: params.courseId, userId, }, data: { isPublished: true, } }); return NextResponse.json(publishedCourse); } catch (error) { console.log(\"[COURSE_ID_PUBLISH]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\courses\\[courseId]\\unpublish", "filename": "route.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; import { db } from \"@/lib/db\"; export async function PATCH( req: Request, { params }: { params: { courseId: string } } ) { try { const { userId } = auth(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const course = await db.course.findUnique({ where: { id: params.courseId, userId, }, }); if (!course) { return new NextResponse(\"Not found\", { status: 404 }); } const unpublishedCourse = await db.course.update({ where: { id: params.courseId, userId, }, data: { isPublished: false, } }); return NextResponse.json(unpublishedCourse); } catch (error) { console.log(\"[COURSE_ID_UNPUBLISH]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\profile\\[id]", "filename": "route.ts", "content": "import { db } from \"@/lib/db\"; import { auth } from \"@clerk/nextjs\"; import { NextResponse } from \"next/server\"; export async function PATCH( req: Request, { params }: { params: { id: string } } ) { try { const { userId } = auth(); const { ...values } = await req.json(); if (!userId) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const ownProfile = await db.profile.findUnique({ where: { userId, }, }); if (!ownProfile) { return new NextResponse(\"Unauthorized\", { status: 401 }); } const profile = await db.profile.update({ where: { id: params.id, }, data: { ...values, }, }); return NextResponse.json(profile); } catch (error) { console.log(\"[PROFILE_ID]\", error); return new NextResponse(\"Internal Error\", { status: 500 }); } }"}, {"path": ".\\app\\api\\uploadthing", "filename": "core.ts", "content": "import { auth } from \"@clerk/nextjs\"; import { createUploadthing, type FileRouter } from \"uploadthing/next\"; const f = createUploadthing(); const handleAuth = () => { const { userId } = auth(); if (!userId) { throw new Error(\"Unauthorized\"); "}, {"path": ".\\app\\api\\uploadthing", "filename": "route.ts", "content": "import { createNextRouteHandler } from \"uploadthing/next\"; import { ourFileRouter } from \"./core\"; "}, {"path": ".\\app\\api\\webhook", "filename": "route.ts", "content": ""}, {"path": ".\\components", "filename": "banner.tsx", "content": "import { AlertTriangle, CheckCircleIcon } from \"lucide-react\" import { cva, type VariantProps } from \"class-variance-authority\"; import { cn } from \"@/lib/utils\"; const bannerVariants = cva( \"border text-center p-4 text-sm flex items-center w-full\", { variants: { variant: { warning: \"bg-yellow-200/80 border-yellow-30 text-primary dark:bg-yellow-500/80 dark:border-yellow-400 dark:text-primary\", success: \"bg-emerald-700 border-emerald-800 text-secondary dark:bg-emerald-600 dark:border-emerald-700 dark:text-secondary\", } }, defaultVariants: { variant: \"warning\", } } ); interface BannerProps extends VariantProps<typeof bannerVariants> { label: string; }; const iconMap = { warning: AlertTriangle, success: CheckCircleIcon, }; export const Banner = ({ label, variant, }: BannerProps) => { const Icon = iconMap[variant || \"warning\"]; return ( <div className={cn(bannerVariants({ variant }))}> <Icon className=\"h-4 w-4 mr-2\" /> {label} </div> ); };"}, {"path": ".\\components", "filename": "course-card.tsx", "content": "import Image from \"next/image\"; import Link from \"next/link\"; import { BookOpen } from \"lucide-react\"; import { IconBadge } from \"@/components/icon-badge\"; import { formatPrice } from \"@/lib/format\"; import { CourseProgress } from \"@/components/course-progress\"; interface CourseCardProps { id: string; title: string; imageUrl: string; chaptersLength: number; price: number; progress: number | null; category: string; }; export const CourseCard = ({ id, title, imageUrl, chaptersLength, price, progress, category }: CourseCardProps) => { return ( <Link href={`/courses/${id}`}> <div className=\"group hover:shadow-sm transition overflow-hidden border rounded-lg p-3 h-full\"> <div className=\"relative w-full aspect-video rounded-md overflow-hidden\"> <Image fill className=\"object-cover\" alt={title} src={imageUrl} /> </div> <div className=\"flex flex-col pt-2\"> <div className=\"text-lg md:text-base font-medium group-hover:text-sky-700 transition dark:group-hover:text-sky-500 line-clamp-2\"> {title} </div> <p className=\"text-xs text-muted-foreground\"> {category} </p> <div className=\"my-3 flex items-center gap-x-2 text-sm md:text-xs\"> <div className=\"flex items-center gap-x-1 text-slate-500\"> <IconBadge size=\"sm\" icon={BookOpen} /> <span> {chaptersLength} {chaptersLength === 1 ? \"Chapter\" : \"Chapters\"} </span> </div> </div> {progress !== null ? ( <CourseProgress variant={progress === 100 ? \"success\" : \"default\"} size=\"sm\" value={progress} /> ) : ( <p className=\"text-md md:text-sm font-medium text-slate-700\"> {formatPrice(price)} </p> )} </div> </div> </Link> ) }"}, {"path": ".\\components", "filename": "course-progress.tsx", "content": "import { Progress } from \"@/components/ui/progress\"; import { cn } from \"@/lib/utils\"; interface CourseProgressProps { value: number; variant?: \"default\" | \"success\", size?: \"default\" | \"sm\"; }; const colorByVariant = { default: \"text-sky-700\", success: \"text-emerald-700\", } const sizeByVariant = { default: \"text-sm\", sm: \"text-xs\", } export const CourseProgress = ({ value, variant, size, }: CourseProgressProps) => { return ( <div> <Progress className=\"h-2\" value={value} variant={variant} /> <p className={cn( \"font-medium mt-2 text-sky-700\", colorByVariant[variant || \"default\"], sizeByVariant[size || \"default\"], )}> {Math.round(value)}% Complete </p> </div> ) }"}, {"path": ".\\components", "filename": "courses-list.tsx", "content": "import { Category, Course } from \"@prisma/client\"; import { CourseCard } from \"@/components/course-card\"; import { CourseWithProgressWithCategory } from \"@/types\"; interface CoursesListProps { items: CourseWithProgressWithCategory[]; } export const CoursesList = ({ items }: CoursesListProps) => { return ( <div> <div className=\"grid sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-4 gap-4\"> {items.map((item) => ( <CourseCard key={item.id} id={item.id} title={item.title} imageUrl={item.imageUrl!} chaptersLength={item.chapters.length} price={item.price!} progress={item.progress} category={item?.category?.name!} /> ))} </div> {items.length === 0 && ( <div className=\"text-center text-sm text-muted-foreground mt-10\"> No courses found </div> )} </div> ) }"}, {"path": ".\\components", "filename": "editor.tsx", "content": "\"use client\"; import dynamic from \"next/dynamic\"; import { useMemo } from \"react\"; import \"react-quill/dist/quill.snow.css\"; interface EditorProps { onChange: (value: string) => void; value: string; }; export const Editor = ({ onChange, value, }: EditorProps) => { const ReactQuill = useMemo(() => dynamic(() => import(\"react-quill\"), { ssr: false }), []); return ( <div > <ReactQuill theme=\"snow\" value={value} onChange={onChange} /> </div> ); }; "}, {"path": ".\\components", "filename": "file-upload.tsx", "content": "\"use client\"; import toast from \"react-hot-toast\"; import { UploadDropzone } from \"@/lib/uploadthing\"; import { ourFileRouter } from \"@/app/api/uploadthing/core\"; interface FileUploadProps { onChange: (url?: string, originalFilename?: string) => void; endpoint: keyof typeof ourFileRouter; }; export const FileUpload = ({ onChange, endpoint }: FileUploadProps) => { return ( <UploadDropzone endpoint={endpoint} onClientUploadComplete={(res) => { console.log(\"onClientUploadComplete res:\", res); onChange(res?.[0].url, res?.[0].name); }} onUploadError={(error: Error) => { toast.error(`${error?.message}`); }} /> ); } "}, {"path": ".\\components", "filename": "icon-badge.tsx", "content": "import { LucideIcon } from 'lucide-react'; import { cva, type VariantProps } from \"class-variance-authority\"; import { cn } from \"@/lib/utils\"; "}, {"path": ".\\components", "filename": "navbar-routes.tsx", "content": "\"use client\"; import { UserButton } from \"@clerk/nextjs\"; import { usePathname, useRouter } from \"next/navigation\"; import { Button } from \"@/components/ui/button\"; import { LogOut } from \"lucide-react\"; import Link from \"next/link\"; import { SearchInput } from \"./search-input\"; import { SafeProfile } from \"@/types\"; interface NavbarRoutesProps { currentProfile?: SafeProfile | null } export const NavbarRoutes : React.FC<NavbarRoutesProps> = ({ currentProfile }) => { const pathname = usePathname(); const isTeacherPage = pathname?.startsWith(\"/teacher\"); const isPlayerPage = pathname?.includes(\"/chapters\"); const isSearchPage = pathname === \"/search\"; const isTeacher = currentProfile?.role === \"ADMIN\" || currentProfile?.role === \"TEACHER\"; return ( <> {isSearchPage && ( <div className=\"hidden md:block\"> <SearchInput /> </div> )} <div className=\"flex gap-x-2 ml-auto\"> {isTeacherPage || isPlayerPage ? ( <Link href=\"/\"> <Button size=\"sm\" variant=\"ghost\"> <LogOut className=\"h-4 w-4 mr-2\" /> Exit </Button> </Link> ) : isTeacher ? ( <Link href=\"/teacher/courses\"> <Button size=\"sm\" variant=\"ghost\"> Teacher Mode </Button> </Link> ) : null} <UserButton afterSignOutUrl=\"/\" /> </div> </> ); };"}, {"path": ".\\components", "filename": "preview.tsx", "content": "\"use client\"; import dynamic from \"next/dynamic\"; import { useMemo } from \"react\"; import \"react-quill/dist/quill.bubble.css\"; interface PreviewProps { value: string; }; export const Preview = ({ value }: PreviewProps) => { "}, {"path": ".\\components", "filename": "search-input.tsx", "content": "\"use client\"; import { Search } from \"lucide-react\"; import { Input } from \"@/components/ui/input\"; import { useEffect, useState } from \"react\"; import { useDebounce } from \"@/hooks/use-debounce\"; import { usePathname, useRouter } from \"next/navigation\"; import qs from \"query-string\"; export const SearchInput = () => { const [value, setValue] = useState(\"\"); const debouncedValue = useDebounce(value, 500); const searchParams = new URLSearchParams(); const router = useRouter(); const pathname = usePathname(); const currentCategoryId = searchParams.get(\"categoryId\"); useEffect(() => { const url = qs.stringifyUrl({ url: pathname, query: { title: debouncedValue, categoryId: currentCategoryId, } }, { skipNull: true, skipEmptyString: true }); router.push(url); }, [debouncedValue, currentCategoryId, router, pathname]); return ( <div className=\"relative\"> <Search className=\"h-4 w-4 top-3 absolute left-3 text-slate-600 dark:text-slate-200\" /> <Input onChange = {(e) => setValue(e.target.value)} value={value} className=\"w-full md:w-[300px] pl-9 rounded-full bg-slate-100 dark:bg-slate-800 focus-visible:ring-slate-200\" placeholder=\"Search for courses\" /> </div> ) }"}, {"path": ".\\components", "filename": "theme-switch.tsx", "content": "\"use client\"; import { useTheme } from \"./providers/theme-provider\" import React from \"react\"; import { BsMoon, BsSun } from \"react-icons/bs\"; import { useClerk, SignedIn, SignedOut, SignInButton, UserButton, } from \"@clerk/nextjs\"; import { FaArrowUp, FaUser, FaUserAlt } from \"react-icons/fa\"; export default function ThemeSwitch() { const { theme, toggleTheme } = useTheme(); const scrollToTop = () => { window.scrollTo({ top: 0, behavior: \"smooth\" }); }; const { openSignIn } = useClerk(); return ( <> <div className=\"fixed bottom-5 right-5 flex gap-4\"> <button title=\"Toggle theme\" className=\"bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950\" onClick={toggleTheme} > {theme === \"light\" ? <BsSun /> : <BsMoon />} </button> <button title=\"Scroll to top\" className=\"bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950\" onClick={scrollToTop} > <FaArrowUp /> </button> <SignedIn> <UserButton afterSignOutUrl=\"/\" appearance={{ elements: { avatarBox: \"h-[48px] w-[48px] rounded-[24px]\", }, }} /> </SignedIn> <SignedOut> <button title=\"Sign in\" onClick={() => openSignIn()} className=\"bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950\" > <FaUser /> </button> </SignedOut> </div> </> ); }"}, {"path": ".\\components\\modals", "filename": "confirm-modal.tsx", "content": "\"use client\"; import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger, } from \"@/components/ui/alert-dialog\"; interface ConfirmModalProps { children: React.ReactNode; onConfirm: () => void; }; export const ConfirmModal = ({ children, onConfirm, }: ConfirmModalProps) => { return ( <AlertDialog> <AlertDialogTrigger asChild> {children} </AlertDialogTrigger> <AlertDialogContent> <AlertDialogHeader> <AlertDialogTitle> Are you sure? </AlertDialogTitle> </AlertDialogHeader> <AlertDialogDescription> This action cannot be undone. </AlertDialogDescription> <AlertDialogFooter> <AlertDialogCancel> Cancel </AlertDialogCancel> <AlertDialogAction onClick={onConfirm}> Confirm </AlertDialogAction> </AlertDialogFooter> </AlertDialogContent> </AlertDialog> )}"}, {"path": ".\\components\\providers", "filename": "confetti-provider.tsx", "content": "\"use client\"; import ReactConfetti from \"react-confetti\"; import { useConfettiStore } from \"@/hooks/use-confetti-store\"; export const ConfettiProvider = () => { const confetti = useConfettiStore(); if (!confetti.isOpen) return null; return ( <ReactConfetti className=\"pointer-events-none z-[100]\" numberOfPieces={500} recycle={false} onConfettiComplete={() => { confetti.onClose(); }} /> ) }"}, {"path": ".\\components\\providers", "filename": "theme-provider.tsx", "content": "\"use client\"; import React, { useEffect, useState, createContext, useContext } from \"react\"; type Theme = \"light\" | \"dark\"; type ThemeContextProviderProps = { children: React.ReactNode; }; type ThemeContextType = { theme: Theme; toggleTheme: () => void; }; const ThemeContext = createContext<ThemeContextType | null>(null); export default function ThemeContextProvider({ children, }: ThemeContextProviderProps) { const [theme, setTheme] = useState<Theme>(\"dark\"); const toggleTheme = () => { if (theme === \"light\") { setTheme(\"dark\"); window.localStorage.setItem(\"theme\", \"dark\"); document.documentElement.classList.add(\"dark\"); } else { setTheme(\"light\"); window.localStorage.setItem(\"theme\", \"light\"); document.documentElement.classList.remove(\"dark\"); } }; useEffect(() => { const localTheme = window.localStorage.getItem(\"theme\") as Theme | null; if (localTheme) { setTheme(localTheme); if (localTheme === \"dark\") { document.documentElement.classList.add(\"dark\"); } } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) { setTheme(\"dark\"); document.documentElement.classList.add(\"dark\"); } }, []); return ( <ThemeContext.Provider value={{ theme, toggleTheme, }} > {children} </ThemeContext.Provider> ); } export function useTheme() { const context = useContext(ThemeContext); if (context === null) { throw new Error(\"useTheme must be used within a ThemeContextProvider\"); } return context; } "}, {"path": ".\\components\\providers", "filename": "toaster-provider.tsx", "content": "\"use client\"; import { Toaster } from \"react-hot-toast\"; export const ToastProvider = () => { return <Toaster /> }"}, {"path": ".\\components\\ui", "filename": "alert-dialog.tsx", "content": "\"use client\" import * as React from \"react\" import * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\" import { cn } from \"@/lib/utils\" import { buttonVariants } from \"@/components/ui/button\" const AlertDialog = AlertDialogPrimitive.Root const AlertDialogTrigger = AlertDialogPrimitive.Trigger const AlertDialogPortal = ({ className, ...props }: AlertDialogPrimitive.AlertDialogPortalProps) => ( <AlertDialogPrimitive.Portal className={cn(className)} {...props} /> ) AlertDialogPortal.displayName = AlertDialogPrimitive.Portal.displayName const AlertDialogOverlay = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay> >(({ className, children, ...props }, ref) => ( <AlertDialogPrimitive.Overlay className={cn( \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className )} {...props} ref={ref} /> )) AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName const AlertDialogContent = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Content>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content> >(({ className, ...props }, ref) => ( <AlertDialogPortal> <AlertDialogOverlay /> <AlertDialogPrimitive.Content ref={ref} className={cn( \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full\", className )} {...props} /> </AlertDialogPortal> )) AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col space-y-2 text-center sm:text-left\", className )} {...props} /> ) AlertDialogHeader.displayName = \"AlertDialogHeader\" const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className )} {...props} /> ) AlertDialogFooter.displayName = \"AlertDialogFooter\" const AlertDialogTitle = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title> >(({ className, ...props }, ref) => ( <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} /> )) AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName const AlertDialogDescription = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description> >(({ className, ...props }, ref) => ( <AlertDialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} /> )) AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName const AlertDialogAction = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Action>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action> >(({ className, ...props }, ref) => ( <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} /> )) AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName const AlertDialogCancel = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Cancel>, React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel> >(({ className, ...props }, ref) => ( <AlertDialogPrimitive.Cancel ref={ref} className={cn( buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className )} {...props} /> )) AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName export { AlertDialog, AlertDialogTrigger, AlertDialogContent, AlertDialogHeader, AlertDialogFooter, AlertDialogTitle, AlertDialogDescription, AlertDialogAction, AlertDialogCancel, } "}, {"path": ".\\components\\ui", "filename": "badge.tsx", "content": "import * as React from \"react\" import { cva, type VariantProps } from \"class-variance-authority\" import { cn } from \"@/lib/utils\" const badgeVariants = cva( \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\", { variants: { variant: { default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\", secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\", destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\", outline: \"text-foreground\", }, }, defaultVariants: { variant: \"default\", }, } ) export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {} function Badge({ className, variant, ...props }: BadgeProps) { return ( <div className={cn(badgeVariants({ variant }), className)} {...props} /> ) } export { Badge, badgeVariants } "}, {"path": ".\\components\\ui", "filename": "button.tsx", "content": "import * as React from \"react\" import { Slot } from \"@radix-ui/react-slot\" import { cva, type VariantProps } from \"class-variance-authority\" import { cn } from \"@/lib/utils\" const buttonVariants = cva( \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", { variants: { variant: { default: \"bg-primary text-primary-foreground hover:bg-primary/90\", destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\", outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\", secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\", ghost: \"hover:bg-accent hover:text-accent-foreground\", link: \"text-primary underline-offset-4 hover:underline\", success: \"bg-emerald-600 text-white hover:bg-emerald-600/80\" }, size: { default: \"h-10 px-4 py-2\", sm: \"h-9 rounded-md px-3\", lg: \"h-11 rounded-md px-8\", icon: \"h-10 w-10\", }, }, defaultVariants: { variant: \"default\", size: \"default\", }, } ) export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> { asChild?: boolean } const Button = React.forwardRef<HTMLButtonElement, ButtonProps>( ({ className, variant, size, asChild = false, ...props }, ref) => { const Comp = asChild ? Slot : \"button\" return ( <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} /> ) } ) Button.displayName = \"Button\" export { Button, buttonVariants } "}, {"path": ".\\components\\ui", "filename": "card.tsx", "content": "import * as React from \"react\" import { cn } from \"@/lib/utils\" const Card = React.forwardRef< HTMLDivElement, React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => ( <div ref={ref} className={cn( \"rounded-lg border bg-card text-card-foreground shadow-sm\", className )} {...props} /> )) Card.displayName = \"Card\" const CardHeader = React.forwardRef< HTMLDivElement, React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => ( <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} /> )) CardHeader.displayName = \"CardHeader\" const CardTitle = React.forwardRef< HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement> >(({ className, ...props }, ref) => ( <h3 ref={ref} className={cn( \"text-2xl font-semibold leading-none tracking-tight\", className )} {...props} /> )) CardTitle.displayName = \"CardTitle\" const CardDescription = React.forwardRef< HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement> >(({ className, ...props }, ref) => ( <p ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} /> )) CardDescription.displayName = \"CardDescription\" const CardContent = React.forwardRef< HTMLDivElement, React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => ( <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} /> )) CardContent.displayName = \"CardContent\" const CardFooter = React.forwardRef< HTMLDivElement, React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => ( <div ref={ref} className={cn(\"flex items-center p-6 pt-0\", className)} {...props} /> )) CardFooter.displayName = \"CardFooter\" export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } "}, {"path": ".\\components\\ui", "filename": "checkbox.tsx", "content": "\"use client\" import * as React from \"react\" import * as CheckboxPrimitive from \"@radix-ui/react-checkbox\" import { Check } from \"lucide-react\" import { cn } from \"@/lib/utils\" const Checkbox = React.forwardRef< React.ElementRef<typeof CheckboxPrimitive.Root>, React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> >(({ className, ...props }, ref) => ( <CheckboxPrimitive.Root ref={ref} className={cn( \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\", className )} {...props} > <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")} > <Check className=\"h-4 w-4\" /> </CheckboxPrimitive.Indicator> </CheckboxPrimitive.Root> )) Checkbox.displayName = CheckboxPrimitive.Root.displayName export { Checkbox } "}, {"path": ".\\components\\ui", "filename": "combobox.tsx", "content": "\"use client\" import * as React from \"react\" import { Check, ChevronsUpDown } from \"lucide-react\" import { cn } from \"@/lib/utils\" import { Button } from \"@/components/ui/button\" import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, } from \"@/components/ui/command\" import { Popover, PopoverContent, PopoverTrigger, } from \"@/components/ui/popover\" interface ComboboxProps { options: { label: string; value: string }[]; value?: string; onChange: (value: string) => void; }; export const Combobox = ({ options, value, onChange }: ComboboxProps) => { const [open, setOpen] = React.useState(false) return ( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-full justify-between\" > {value ? options.find((option) => option.value === value)?.label : \"Select option...\"} <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" /> </Button> </PopoverTrigger> <PopoverContent className=\"w-full p-0\"> <Command> <CommandInput placeholder=\"Search option...\" /> <CommandEmpty>No option found.</CommandEmpty> <CommandGroup> {options.map((option) => ( <CommandItem key={option.value} onSelect={() => { onChange(option.value === value ? \"\" : option.value) setOpen(false) }} > <Check className={cn( \"mr-2 h-4 w-4\", value === option.value ? \"opacity-100\" : \"opacity-0\" )} /> {option.label} </CommandItem> ))} </CommandGroup> </Command> </PopoverContent> </Popover> ) } "}, {"path": ".\\components\\ui", "filename": "command.tsx", "content": "\"use client\" import * as React from \"react\" import { DialogProps } from \"@radix-ui/react-dialog\" import { Command as CommandPrimitive } from \"cmdk\" import { Search } from \"lucide-react\" import { cn } from \"@/lib/utils\" import { Dialog, DialogContent } from \"@/components/ui/dialog\" const Command = React.forwardRef< React.ElementRef<typeof CommandPrimitive>, React.ComponentPropsWithoutRef<typeof CommandPrimitive> >(({ className, ...props }, ref) => ( <CommandPrimitive ref={ref} className={cn( \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\", className )} {...props} /> )) Command.displayName = CommandPrimitive.displayName interface CommandDialogProps extends DialogProps {} const CommandDialog = ({ children, ...props }: CommandDialogProps) => { return ( <Dialog {...props}> <DialogContent className=\"overflow-hidden p-0 shadow-lg\"> <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\"> {children} </Command> </DialogContent> </Dialog> ) } const CommandInput = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Input>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> >(({ className, ...props }, ref) => ( <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\"> <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" /> <CommandPrimitive.Input ref={ref} className={cn( \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\", className )} {...props} /> </div> )) CommandInput.displayName = CommandPrimitive.Input.displayName const CommandList = React.forwardRef< React.ElementRef<typeof CommandPrimitive.List>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.List> >(({ className, ...props }, ref) => ( <CommandPrimitive.List ref={ref} className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)} {...props} /> )) CommandList.displayName = CommandPrimitive.List.displayName const CommandEmpty = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Empty>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty> >((props, ref) => ( <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} /> )) CommandEmpty.displayName = CommandPrimitive.Empty.displayName const CommandGroup = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Group>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group> >(({ className, ...props }, ref) => ( <CommandPrimitive.Group ref={ref} className={cn( \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\", className )} {...props} /> )) CommandGroup.displayName = CommandPrimitive.Group.displayName const CommandSeparator = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator> >(({ className, ...props }, ref) => ( <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} /> )) CommandSeparator.displayName = CommandPrimitive.Separator.displayName const CommandItem = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Item>, React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item> >(({ className, ...props }, ref) => ( <CommandPrimitive.Item ref={ref} className={cn( \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className )} {...props} /> )) CommandItem.displayName = CommandPrimitive.Item.displayName const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => { return ( <span className={cn( \"ml-auto text-xs tracking-widest text-muted-foreground\", className )} {...props} /> ) } CommandShortcut.displayName = \"CommandShortcut\" export { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator, } "}, {"path": ".\\components\\ui", "filename": "dialog.tsx", "content": "\"use client\" import * as React from \"react\" import * as DialogPrimitive from \"@radix-ui/react-dialog\" import { X } from \"lucide-react\" import { cn } from \"@/lib/utils\" const Dialog = DialogPrimitive.Root const DialogTrigger = DialogPrimitive.Trigger const DialogPortal = ({ className, ...props }: DialogPrimitive.DialogPortalProps) => ( <DialogPrimitive.Portal className={cn(className)} {...props} /> ) DialogPortal.displayName = DialogPrimitive.Portal.displayName const DialogOverlay = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> >(({ className, ...props }, ref) => ( <DialogPrimitive.Overlay ref={ref} className={cn( \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className )} {...props} /> )) DialogOverlay.displayName = DialogPrimitive.Overlay.displayName const DialogContent = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> >(({ className, children, ...props }, ref) => ( <DialogPortal> <DialogOverlay /> <DialogPrimitive.Content ref={ref} className={cn( \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full\", className )} {...props} > {children} <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </DialogPrimitive.Close> </DialogPrimitive.Content> </DialogPortal> )) DialogContent.displayName = DialogPrimitive.Content.displayName const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col space-y-1.5 text-center sm:text-left\", className )} {...props} /> ) DialogHeader.displayName = \"DialogHeader\" const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className )} {...props} /> ) DialogFooter.displayName = \"DialogFooter\" const DialogTitle = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Title>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> >(({ className, ...props }, ref) => ( <DialogPrimitive.Title ref={ref} className={cn( \"text-lg font-semibold leading-none tracking-tight\", className )} {...props} /> )) DialogTitle.displayName = DialogPrimitive.Title.displayName const DialogDescription = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Description>, React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description> >(({ className, ...props }, ref) => ( <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} /> )) DialogDescription.displayName = DialogPrimitive.Description.displayName export { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, } "}, {"path": ".\\components\\ui", "filename": "dropdown-menu.tsx", "content": "\"use client\" import * as React from \"react\" import * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\" import { Check, ChevronRight, Circle } from \"lucide-react\" import { cn } from \"@/lib/utils\" const DropdownMenu = DropdownMenuPrimitive.Root const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger const DropdownMenuGroup = DropdownMenuPrimitive.Group const DropdownMenuPortal = DropdownMenuPrimitive.Portal const DropdownMenuSub = DropdownMenuPrimitive.Sub const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup const DropdownMenuSubTrigger = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & { inset?: boolean } >(({ className, inset, children, ...props }, ref) => ( <DropdownMenuPrimitive.SubTrigger ref={ref} className={cn( \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\", inset && \"pl-8\", className )} {...props} > {children} <ChevronRight className=\"ml-auto h-4 w-4\" /> </DropdownMenuPrimitive.SubTrigger> )) DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName const DropdownMenuSubContent = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.SubContent>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent> >(({ className, ...props }, ref) => ( <DropdownMenuPrimitive.SubContent ref={ref} className={cn( \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\", className )} {...props} /> )) DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName const DropdownMenuContent = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.Content>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content> >(({ className, sideOffset = 4, ...props }, ref) => ( <DropdownMenuPrimitive.Portal> <DropdownMenuPrimitive.Content ref={ref} sideOffset={sideOffset} className={cn( \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\", className )} {...props} /> </DropdownMenuPrimitive.Portal> )) DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName const DropdownMenuItem = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.Item>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & { inset?: boolean } >(({ className, inset, ...props }, ref) => ( <DropdownMenuPrimitive.Item ref={ref} className={cn( \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", inset && \"pl-8\", className )} {...props} /> )) DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName const DropdownMenuCheckboxItem = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem> >(({ className, children, checked, ...props }, ref) => ( <DropdownMenuPrimitive.CheckboxItem ref={ref} className={cn( \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className )} checked={checked} {...props} > <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"> <DropdownMenuPrimitive.ItemIndicator> <Check className=\"h-4 w-4\" /> </DropdownMenuPrimitive.ItemIndicator> </span> {children} </DropdownMenuPrimitive.CheckboxItem> )) DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName const DropdownMenuRadioItem = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem> >(({ className, children, ...props }, ref) => ( <DropdownMenuPrimitive.RadioItem ref={ref} className={cn( \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className )} {...props} > <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"> <DropdownMenuPrimitive.ItemIndicator> <Circle className=\"h-2 w-2 fill-current\" /> </DropdownMenuPrimitive.ItemIndicator> </span> {children} </DropdownMenuPrimitive.RadioItem> )) DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName const DropdownMenuLabel = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.Label>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & { inset?: boolean } >(({ className, inset, ...props }, ref) => ( <DropdownMenuPrimitive.Label ref={ref} className={cn( \"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className )} {...props} /> )) DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName const DropdownMenuSeparator = React.forwardRef< React.ElementRef<typeof DropdownMenuPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator> >(({ className, ...props }, ref) => ( <DropdownMenuPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} /> )) DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => { return ( <span className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)} {...props} /> ) } DropdownMenuShortcut.displayName = \"DropdownMenuShortcut\" export { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuCheckboxItem, DropdownMenuRadioItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuGroup, DropdownMenuPortal, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuRadioGroup, } "}, {"path": ".\\components\\ui", "filename": "form.tsx", "content": "import * as React from \"react\" import * as LabelPrimitive from \"@radix-ui/react-label\" import { Slot } from \"@radix-ui/react-slot\" import { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext, } from \"react-hook-form\" import { cn } from \"@/lib/utils\" import { Label } from \"@/components/ui/label\" const Form = FormProvider type FormFieldContextValue< TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues> > = { name: TName } const FormFieldContext = React.createContext<FormFieldContextValue>( {} as FormFieldContextValue ) const FormField = < TFieldValues extends FieldValues = FieldValues, TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues> >({ ...props }: ControllerProps<TFieldValues, TName>) => { return ( <FormFieldContext.Provider value={{ name: props.name }}> <Controller {...props} /> </FormFieldContext.Provider> ) } const useFormField = () => { const fieldContext = React.useContext(FormFieldContext) const itemContext = React.useContext(FormItemContext) const { getFieldState, formState } = useFormContext() const fieldState = getFieldState(fieldContext.name, formState) if (!fieldContext) { throw new Error(\"useFormField should be used within <FormField>\") } const { id } = itemContext return { id, name: fieldContext.name, formItemId: `${id}-form-item`, formDescriptionId: `${id}-form-item-description`, formMessageId: `${id}-form-item-message`, ...fieldState, } } type FormItemContextValue = { id: string } const FormItemContext = React.createContext<FormItemContextValue>( {} as FormItemContextValue ) const FormItem = React.forwardRef< HTMLDivElement, React.HTMLAttributes<HTMLDivElement> >(({ className, ...props }, ref) => { const id = React.useId() return ( <FormItemContext.Provider value={{ id }}> <div ref={ref} className={cn(\"space-y-2\", className)} {...props} /> </FormItemContext.Provider> ) }) FormItem.displayName = \"FormItem\" const FormLabel = React.forwardRef< React.ElementRef<typeof LabelPrimitive.Root>, React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> >(({ className, ...props }, ref) => { const { error, formItemId } = useFormField() return ( <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} /> ) }) FormLabel.displayName = \"FormLabel\" const FormControl = React.forwardRef< React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot> >(({ ...props }, ref) => { const { error, formItemId, formDescriptionId, formMessageId } = useFormField() return ( <Slot ref={ref} id={formItemId} aria-describedby={ !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}` } aria-invalid={!!error} {...props} /> ) }) FormControl.displayName = \"FormControl\" const FormDescription = React.forwardRef< HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement> >(({ className, ...props }, ref) => { const { formDescriptionId } = useFormField() return ( <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} /> ) }) FormDescription.displayName = \"FormDescription\" const FormMessage = React.forwardRef< HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement> >(({ className, children, ...props }, ref) => { const { error, formMessageId } = useFormField() const body = error ? String(error?.message) : children if (!body) { return null } return ( <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props} > {body} </p> ) }) FormMessage.displayName = \"FormMessage\" export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField, } "}, {"path": ".\\components\\ui", "filename": "input.tsx", "content": "import * as React from \"react\" import { cn } from \"@/lib/utils\" export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {} const Input = React.forwardRef<HTMLInputElement, InputProps>( ({ className, type, ...props }, ref) => { return ( <input type={type} className={cn( \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className )} ref={ref} {...props} /> ) } ) Input.displayName = \"Input\" export { Input } "}, {"path": ".\\components\\ui", "filename": "label.tsx", "content": "\"use client\" import * as React from \"react\" import * as LabelPrimitive from \"@radix-ui/react-label\" import { cva, type VariantProps } from \"class-variance-authority\" import { cn } from \"@/lib/utils\" const labelVariants = cva( \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\" ) const Label = React.forwardRef< React.ElementRef<typeof LabelPrimitive.Root>, React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants> >(({ className, ...props }, ref) => ( <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} /> )) Label.displayName = LabelPrimitive.Root.displayName export { Label } "}, {"path": ".\\components\\ui", "filename": "popover.tsx", "content": "\"use client\" import * as React from \"react\" import * as PopoverPrimitive from \"@radix-ui/react-popover\" import { cn } from \"@/lib/utils\" const Popover = PopoverPrimitive.Root const PopoverTrigger = PopoverPrimitive.Trigger const PopoverContent = React.forwardRef< React.ElementRef<typeof PopoverPrimitive.Content>, React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> >(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => ( <PopoverPrimitive.Portal> <PopoverPrimitive.Content ref={ref} align={align} sideOffset={sideOffset} className={cn( \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\", className )} {...props} /> </PopoverPrimitive.Portal> )) PopoverContent.displayName = PopoverPrimitive.Content.displayName export { Popover, PopoverTrigger, PopoverContent } "}, {"path": ".\\components\\ui", "filename": "progress.tsx", "content": "\"use client\" import * as React from \"react\" import * as ProgressPrimitive from \"@radix-ui/react-progress\" import { cva, type VariantProps } from \"class-variance-authority\" import { cn } from \"@/lib/utils\" const progressVariants = cva( \"h-full w-full flex-1 bg-primary transition-all\", { variants: { variant: { default: \"bg-sky-600\", success: \"bg-emerald-700\", }, }, defaultVariants: { variant: \"default\", } } ) export interface ProgressProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof progressVariants> {} type CombinedProgressProps = ProgressProps & React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> const Progress = React.forwardRef< React.ElementRef<typeof ProgressPrimitive.Root>, CombinedProgressProps >(({ className, value, variant, ...props }, ref) => ( <ProgressPrimitive.Root ref={ref} className={cn( \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className )} {...props} > <ProgressPrimitive.Indicator className={cn(progressVariants({ variant }))} style={{ transform: `translateX(-${100 - (value || 0)}%)` }} /> </ProgressPrimitive.Root> )) Progress.displayName = ProgressPrimitive.Root.displayName export { Progress } "}, {"path": ".\\components\\ui", "filename": "select.tsx", "content": "\"use client\" import * as React from \"react\" import * as SelectPrimitive from \"@radix-ui/react-select\" import { Check, ChevronDown } from \"lucide-react\" import { cn } from \"@/lib/utils\" const Select = SelectPrimitive.Root const SelectGroup = SelectPrimitive.Group const SelectValue = SelectPrimitive.Value const SelectTrigger = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Trigger>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> >(({ className, children, ...props }, ref) => ( <SelectPrimitive.Trigger ref={ref} className={cn( \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className )} {...props} > {children} <SelectPrimitive.Icon asChild> <ChevronDown className=\"h-4 w-4 opacity-50\" /> </SelectPrimitive.Icon> </SelectPrimitive.Trigger> )) SelectTrigger.displayName = SelectPrimitive.Trigger.displayName const SelectContent = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Content>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> >(({ className, children, position = \"popper\", ...props }, ref) => ( <SelectPrimitive.Portal> <SelectPrimitive.Content ref={ref} className={cn( \"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\", position === \"popper\" && \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\", className )} position={position} {...props} > <SelectPrimitive.Viewport className={cn( \"p-1\", position === \"popper\" && \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\" )} > {children} </SelectPrimitive.Viewport> </SelectPrimitive.Content> </SelectPrimitive.Portal> )) SelectContent.displayName = SelectPrimitive.Content.displayName const SelectLabel = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Label>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label> >(({ className, ...props }, ref) => ( <SelectPrimitive.Label ref={ref} className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)} {...props} /> )) SelectLabel.displayName = SelectPrimitive.Label.displayName const SelectItem = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Item>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item> >(({ className, children, ...props }, ref) => ( <SelectPrimitive.Item ref={ref} className={cn( \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className )} {...props} > <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"> <SelectPrimitive.ItemIndicator> <Check className=\"h-4 w-4\" /> </SelectPrimitive.ItemIndicator> </span> <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText> </SelectPrimitive.Item> )) SelectItem.displayName = SelectPrimitive.Item.displayName const SelectSeparator = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Separator>, React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator> >(({ className, ...props }, ref) => ( <SelectPrimitive.Separator ref={ref} className={cn(\"-mx-1 my-1 h-px bg-muted\", className)} {...props} /> )) SelectSeparator.displayName = SelectPrimitive.Separator.displayName export { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectLabel, SelectItem, SelectSeparator, } "}, {"path": ".\\components\\ui", "filename": "separator.tsx", "content": "\"use client\" import * as React from \"react\" import * as SeparatorPrimitive from \"@radix-ui/react-separator\" import { cn } from \"@/lib/utils\" const Separator = React.forwardRef< React.ElementRef<typeof SeparatorPrimitive.Root>, React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> >( ( { className, orientation = \"horizontal\", decorative = true, ...props }, ref ) => ( <SeparatorPrimitive.Root ref={ref} decorative={decorative} orientation={orientation} className={cn( \"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className )} {...props} /> ) ) Separator.displayName = SeparatorPrimitive.Root.displayName export { Separator } "}, {"path": ".\\components\\ui", "filename": "sheet.tsx", "content": "\"use client\" import * as React from \"react\" import * as SheetPrimitive from \"@radix-ui/react-dialog\" import { cva, type VariantProps } from \"class-variance-authority\" import { X } from \"lucide-react\" import { cn } from \"@/lib/utils\" const Sheet = SheetPrimitive.Root const SheetTrigger = SheetPrimitive.Trigger const SheetClose = SheetPrimitive.Close const SheetPortal = ({ className, ...props }: SheetPrimitive.DialogPortalProps) => ( <SheetPrimitive.Portal className={cn(className)} {...props} /> ) SheetPortal.displayName = SheetPrimitive.Portal.displayName const SheetOverlay = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Overlay>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay> >(({ className, ...props }, ref) => ( <SheetPrimitive.Overlay className={cn( \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className )} {...props} ref={ref} /> )) SheetOverlay.displayName = SheetPrimitive.Overlay.displayName const sheetVariants = cva( \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\", { variants: { side: { top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\", bottom: \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\", left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\", right: \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\", }, }, defaultVariants: { side: \"right\", }, } ) interface SheetContentProps extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>, VariantProps<typeof sheetVariants> {} const SheetContent = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps >(({ side = \"right\", className, children, ...props }, ref) => ( <SheetPortal> <SheetOverlay /> <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props} > {children} <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </SheetPrimitive.Close> </SheetPrimitive.Content> </SheetPortal> )) SheetContent.displayName = SheetPrimitive.Content.displayName const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col space-y-2 text-center sm:text-left\", className )} {...props} /> ) SheetHeader.displayName = \"SheetHeader\" const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className )} {...props} /> ) SheetFooter.displayName = \"SheetFooter\" const SheetTitle = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Title>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title> >(({ className, ...props }, ref) => ( <SheetPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold text-foreground\", className)} {...props} /> )) SheetTitle.displayName = SheetPrimitive.Title.displayName const SheetDescription = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Description>, React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description> >(({ className, ...props }, ref) => ( <SheetPrimitive.Description ref={ref} className={cn(\"text-sm text-muted-foreground\", className)} {...props} /> )) SheetDescription.displayName = SheetPrimitive.Description.displayName export { Sheet, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription, } "}, {"path": ".\\components\\ui", "filename": "table.tsx", "content": "import * as React from \"react\" import { cn } from \"@/lib/utils\" const Table = React.forwardRef< HTMLTableElement, React.HTMLAttributes<HTMLTableElement> >(({ className, ...props }, ref) => ( <div className=\"relative w-full overflow-auto\"> <table ref={ref} className={cn(\"w-full caption-bottom text-sm\", className)} {...props} /> </div> )) Table.displayName = \"Table\" const TableHeader = React.forwardRef< HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement> >(({ className, ...props }, ref) => ( <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} /> )) TableHeader.displayName = \"TableHeader\" const TableBody = React.forwardRef< HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement> >(({ className, ...props }, ref) => ( <tbody ref={ref} className={cn(\"[&_tr:last-child]:border-0\", className)} {...props} /> )) TableBody.displayName = \"TableBody\" const TableFooter = React.forwardRef< HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement> >(({ className, ...props }, ref) => ( <tfoot ref={ref} className={cn(\"bg-primary font-medium text-primary-foreground\", className)} {...props} /> )) TableFooter.displayName = \"TableFooter\" const TableRow = React.forwardRef< HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement> >(({ className, ...props }, ref) => ( <tr ref={ref} className={cn( \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className )} {...props} /> )) TableRow.displayName = \"TableRow\" const TableHead = React.forwardRef< HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement> >(({ className, ...props }, ref) => ( <th ref={ref} className={cn( \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\", className )} {...props} /> )) TableHead.displayName = \"TableHead\" const TableCell = React.forwardRef< HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement> >(({ className, ...props }, ref) => ( <td ref={ref} className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)} {...props} /> )) TableCell.displayName = \"TableCell\" const TableCaption = React.forwardRef< HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement> >(({ className, ...props }, ref) => ( <caption ref={ref} className={cn(\"mt-4 text-sm text-muted-foreground\", className)} {...props} /> )) TableCaption.displayName = \"TableCaption\" export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption, } "}, {"path": ".\\components\\ui", "filename": "textarea.tsx", "content": "import * as React from \"react\" import { cn } from \"@/lib/utils\" export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {} const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>( ({ className, ...props }, ref) => { return ( <textarea className={cn( \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className )} ref={ref} {...props} /> ) } ) Textarea.displayName = \"Textarea\" export { Textarea } "}, {"path": ".\\hooks", "filename": "use-confetti-store.ts", "content": "import { create } from \"zustand\"; type ConfettiStore = { isOpen: boolean; onOpen: () => void; onClose: () => void; }; export const useConfettiStore = create<ConfettiStore>((set) => ({ isOpen: false, onOpen: () => set({ isOpen: true }), onClose: () => set({ isOpen: false }), })); "}, {"path": ".\\hooks", "filename": "use-debounce.ts", "content": "import { useEffect, useState } from 'react'; "}, {"path": ".\\lib", "filename": "current-profile.ts", "content": "import { currentUser, redirectToSignIn } from \"@clerk/nextjs\"; import { auth } from \"@clerk/nextjs\"; import { db } from \"@/lib/db\"; export const currentProfile = async () => { const user = await currentUser(); if (!user) { return redirectToSignIn(); } let profile = await db.profile.findUnique({ where: { userId: user.id, }, }); if (profile) { return profile; } else { let firstName = user.firstName || \"\"; let lastName = user.lastName || \"\"; "}, {"path": ".\\lib", "filename": "db.ts", "content": ""}, {"path": ".\\lib", "filename": "format.ts", "content": "export const formatPrice = (price: number) => { return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', }).format(price); }"}, {"path": ".\\lib", "filename": "logging.ts", "content": "import { db } from \"@/lib/db\"; export interface Logging { id?: string; url: string; method: string; body?: string; response?: string; statusCode?: number; errorMessage?: string; createdAt: Date; } export async function createLogging(logging: Logging): Promise<void> { await db.logging.create({ data: logging, }); }"}, {"path": ".\\lib", "filename": "stripe.ts", "content": "import Stripe from \"stripe\"; export const stripe = new Stripe(process.env.STRIPE_API_KEY!, { apiVersion: \"2023-08-16\", typescript: true, });"}, {"path": ".\\lib", "filename": "teacher.ts", "content": "import { currentProfile } from \"./current-profile\" export const isTeacher = async () => { const profile = await currentProfile(); if (profile) { console.log(\"teacher.ts_IsTeacher: \", profile.role === \"ADMIN\" || profile.role === \"TEACHER\") return profile.role === \"ADMIN\" || profile.role === \"TEACHER\"; } return false; }"}, {"path": ".\\lib", "filename": "uploadthing.ts", "content": "import { generateComponents } from \"@uploadthing/react\"; import type { OurFileRouter } from \"@/app/api/uploadthing/core\"; export const { UploadButton, UploadDropzone, Uploader } = generateComponents<OurFileRouter>();"}, {"path": ".\\lib", "filename": "utils.ts", "content": "import { type ClassValue, clsx } from \"clsx\" import { twMerge } from \"tailwind-merge\" export function cn(...inputs: ClassValue[]) { return twMerge(clsx(inputs)) } "}, {"path": ".\\scripts", "filename": "seed.ts", "content": "const { PrismaClient } = require('@prisma/client'); const database = new PrismaClient(); async function main() { try { await database.category.createMany({ data: [ { name: \"Computer Science\" }, { name: \"Music\" }, { name: \"Fitness\" }, { name: \"Photography\" }, { name: \"Accounting\" }, { name: \"Engineering\" }, { name: \"Filming\" }, ], }); console.log(\"Seeding finished.\"); } catch (error) { console.log(\"Error seeding the database categories\", error); } finally { await database.$disconnect(); } } main();"}]