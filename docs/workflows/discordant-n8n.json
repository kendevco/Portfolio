{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "discordant-ai-services",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "https://discordant.kendev.co,http://localhost:3001,http://localhost:3000,*"
        }
      },
      "id": "6c7f2e15-0c42-4f06-9ee9-eb8448f3f8be",
      "name": "Discordant Chat Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1280,
        100
      ],
      "webhookId": "e7e3c8f2-a8b8-4e7e-3c8f-2a8be7e3c8f2"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a26d7036-88e5-4b5c-8539-eb25d62df9cc",
      "name": "Chat Test Interface",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1280,
        300
      ],
      "webhookId": "ae314dfc-4b90-44e1-ba9e-80ffce4ef260"
    },
    {
      "parameters": {
        "jsCode": "// Unified Input & Context Processing - Optimized for v3.0\nconst startTime = Date.now();\nconsole.log('=== UNIFIED INPUT & CONTEXT PROCESSOR v3.0 ===');\n\ntry {\n  const input = $input.first();\n  console.log('Input keys:', Object.keys(input?.json || {}));\n  \n  let normalizedData = {};\n  \n  // Process input data (replaces Enhanced Input Processor)\n  if (input.json.chatInput) {\n    // Test interface mode\n    const testSessionId = require('crypto').randomBytes(16).toString('hex');\n    normalizedData = {\n      input: input.json.chatInput || '',\n      userId: 'test-user',\n      channelId: 'test-channel',\n      sessionId: testSessionId,\n      platform: 'n8n-chat-test',\n      isTestMode: true\n    };\n  } else {\n    // Discordant webhook mode\n    let payload = {};\n    \n    if (input.json.body && typeof input.json.body === 'object') {\n      payload = input.json.body;\n    } else if (input.json.body && typeof input.json.body === 'string') {\n      try {\n        payload = JSON.parse(input.json.body);\n      } catch (e) {\n        payload = input.json || {};\n      }\n    } else {\n      payload = input.json || {};\n    }\n    \n    normalizedData = {\n      input: payload.message || payload.content || '',\n      userId: payload.userId || 'unknown-user',\n      channelId: payload.channelId || 'unknown-channel',\n      sessionId: `${payload.userId || 'unknown'}-${payload.channelId || 'unknown'}`,\n      platform: 'discordant',\n      isTestMode: false,\n      userName: payload.userName || 'Unknown User',\n      serverId: payload.serverId || 'unknown-server'\n    };\n  }\n  \n  normalizedData.timestamp = new Date().toISOString();\n  normalizedData.processingStartTime = startTime;\n  \n  console.log('=== UNIFIED PROCESSOR SUCCESS ===');\n  console.log('Processing time:', Date.now() - startTime, 'ms');\n  \n  return normalizedData;\n  \n} catch (error) {\n  console.error('=== UNIFIED PROCESSOR ERROR ===');\n  console.error('Error details:', error.message);\n  \n  return {\n    input: 'Error processing input: ' + error.message,\n    userId: 'error-user',\n    channelId: 'error-channel',\n    sessionId: 'error-session',\n    platform: 'error',\n    timestamp: new Date().toISOString(),\n    isTestMode: false,\n    errorOccurred: true,\n    errorMessage: error.message,\n    processingStartTime: startTime\n  };\n}"
      },
      "id": "a367e422-25a5-4a5d-b592-3b8e7dd2f804",
      "name": "Unified Input & Context Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  m.content, \n  m.memberId as user_id, \n  m.createdAt as timestamp,\n  m.role,\n  m.fileUrl,\n  COALESCE(mem.name, m.memberId) as user_name,\n  COUNT(*) OVER() as total_messages\nFROM message m\nLEFT JOIN member mem ON m.memberId = mem.id\nWHERE m.channelId = '{{ $json.channelId }}' \n  AND m.deleted = false\n  AND m.content IS NOT NULL\nORDER BY m.createdAt DESC \nLIMIT 20"
      },
      "id": "fa567211-6a60-4e20-8b90-4090ee8a995a",
      "name": "Enhanced Channel History Query",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        -780,
        200
      ],
      "credentials": {
        "mySql": {
          "id": "TvnUCP0CFWmGulQM",
          "name": "MySQL account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Context Formatter with Channel History Integration\nconst startTime = Date.now();\nconsole.log('=== CONTEXT FORMATTER v3.0 ===');\n\ntry {\n  const inputData = $('Unified Input & Context Processor').first().json;\n  const channelHistory = $('Enhanced Channel History Query').all();\n  \n  console.log('Channel history items:', channelHistory.length);\n  console.log('Input data keys:', Object.keys(inputData));\n  \n  // Process context data (replaces Format Context)\n  let conversationHistory = 'No previous conversation in this channel';\n  \n  if (channelHistory && channelHistory.length > 0) {\n    const validMessages = channelHistory.filter(item => \n      item.json?.content?.trim()?.length > 0\n    );\n    \n    if (validMessages.length > 0) {\n      conversationHistory = validMessages\n        .reverse()\n        .map(item => {\n          const userName = item.json.user_name || item.json.user_id;\n          return `${userName}: ${item.json.content}`;\n        })\n        .join('\\n\\n');\n    }\n  }\n  \n  const now = new Date();\n  const messageCount = channelHistory?.filter(item => \n    item.json?.content?.trim()\n  ).length || 0;\n  \n  const result = {\n    ...inputData,\n    conversationHistory,\n    currentDate: now.toISOString().split('T')[0],\n    currentTime: now.toLocaleTimeString('en-US', { timeZone: 'America/New_York' }),\n    messageCount,\n    processingTime: Date.now() - startTime,\n    coldStartRecovery: messageCount === 0 && channelHistory && channelHistory.length === 0\n  };\n  \n  console.log('=== CONTEXT FORMATTER SUCCESS ===');\n  console.log('Message count:', result.messageCount);\n  console.log('Processing time:', result.processingTime, 'ms');\n  \n  return result;\n  \n} catch (error) {\n  console.error('=== CONTEXT FORMATTER ERROR ===');\n  console.error('Error details:', error.message);\n  \n  const inputData = $('Unified Input & Context Processor').first().json;\n  return {\n    ...inputData,\n    conversationHistory: 'Channel history temporarily unavailable',\n    currentDate: new Date().toISOString().split('T')[0],\n    currentTime: new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' }),\n    messageCount: 0,\n    errorOccurred: true,\n    errorMessage: error.message,\n    processingTime: Date.now() - startTime\n  };\n}"
      },
      "id": "6ebf12b5-ace0-439e-a7a0-06be24132785",
      "name": "Context Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        200
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "frequencyPenalty": 0,
          "maxTokens": 2000,
          "presencePenalty": 0,
          "temperature": 0.3,
          "timeout": 45000
        }
      },
      "id": "ae23002d-f070-49ff-90cb-01622478f049",
      "name": "GPT-4o-Mini Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -340,
        360
      ],
      "credentials": {
        "openAiApi": {
          "id": "93xrPD7UUL9tV6EG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.input }}\n\n{{ $json.conversationHistory !== 'No previous conversation in this channel' ? 'Previous conversation:\\n' + $json.conversationHistory + '\\n\\n' : '' }}",
        "options": {
          "systemMessage": "You are Kenneth's Enhanced Business Intelligence Assistant v3.0! ü§ñ\n\n‚è∞ Current Context:\n- Date: {{ $json.currentDate }}\n- Time: {{ $json.currentTime }} Eastern\n- Conversation Messages: {{ $json.messageCount }}\n- Channel: {{ $json.channelId }}\n\nüéØ Personality:\n- Be helpful, insightful, and engaging\n- Add humor when appropriate\n- Be conversational and personable\n- Show enthusiasm for helping\n\nüõ†Ô∏è Your Available Tools:\n\nüìÖ **Smart Calendar Manager**:\n- Unified calendar operations for all scheduling needs\n- View, create, update, delete, and search events\n- Intelligent operation routing\n\nüîç **Intelligent Search Hub**:\n- Advanced message and file search\n- Dynamic filtering by content type\n- Supports text, images, files, and date ranges\n\nüåê **Web Research**:\n- Tavily_AI_Tool - Advanced AI-powered web search with current information\n\nüèõÔ∏è **GSA Research Suite**:\n- Comprehensive GSA Schedule qualification analysis\n- Industry fit assessment and decision maker identification\n- Value proposition development for federal contracting\n\nüìß **Gmail Communication**:\n- Send professional emails via Kenneth's Gmail account\n- Perfect for follow-ups and business communications\n\nüé¨ **YouTube Analysis**:\n- Extract and analyze YouTube video transcripts\n- Perfect for research and learning\n\nüíº **Your Role**:\nYou serve as Kenneth's Chief Intelligence Officer for National Registration Group, specializing in GSA Schedule consulting. Provide strategic business insights, data-driven recommendations, and professional analysis with actionable next steps.\n\n‚ö° **Performance Guidelines**:\n- Respond quickly and efficiently\n- Use tools only when necessary\n- Always provide helpful responses\n- Account for cold start delays\n- Be professional but personable\n\nBe helpful and don't be afraid to show your wit!",
          "maxIterations": 5
        }
      },
      "id": "b3500e8d-67ca-4a7e-8341-8271fbb479f1",
      "name": "Enhanced AI Agent v3.0",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -340,
        200
      ]
    },
    {
      "parameters": {
        "name": "smart_calendar_manager",
        "description": "Intelligent calendar management hub for all calendar operations including viewing, creating, updating, deleting, and searching events. Automatically determines the best operation based on user intent.",
        "jsCode": "// Smart Calendar Manager - Unified Calendar Operations\nconst startTime = Date.now();\nconsole.log('[SMART_CALENDAR] Processing request:', JSON.stringify($input.item.json, null, 2));\n\ntry {\n  const { operation, timeframe, event_details, search_criteria } = $input.item.json;\n  \n  // For now, return a structured response indicating the operation\n  // In production, this would route to the appropriate Google Calendar API calls\n  \n  let response = `üìÖ **Smart Calendar Manager Response**\\n\\n`;\n  \n  switch (operation) {\n    case 'view':\n      response += `**Operation**: View Calendar\\n`;\n      response += `**Timeframe**: ${timeframe || 'default range'}\\n`;\n      response += `**Status**: Calendar view request processed\\n\\n`;\n      response += `*Note: Integration with Google Calendar API in progress*`;\n      break;\n      \n    case 'create':\n      response += `**Operation**: Create Event\\n`;\n      if (event_details) {\n        response += `**Title**: ${event_details.title || 'Untitled Event'}\\n`;\n        response += `**Start**: ${event_details.start_time || 'TBD'}\\n`;\n        response += `**End**: ${event_details.end_time || 'TBD'}\\n`;\n        response += `**Location**: ${event_details.location || 'TBD'}\\n`;\n      }\n      response += `**Status**: Event creation request processed\\n\\n`;\n      response += `*Note: Google Calendar integration in progress*`;\n      break;\n      \n    case 'update':\n      response += `**Operation**: Update Event\\n`;\n      response += `**Search Criteria**: ${search_criteria || 'Not specified'}\\n`;\n      response += `**Status**: Event update request processed\\n\\n`;\n      response += `*Note: Event search and update integration in progress*`;\n      break;\n      \n    case 'delete':\n      response += `**Operation**: Delete Event\\n`;\n      response += `**Search Criteria**: ${search_criteria || 'Not specified'}\\n`;\n      response += `**Status**: Event deletion request processed\\n\\n`;\n      response += `*Note: Event deletion integration in progress*`;\n      break;\n      \n    case 'search':\n      response += `**Operation**: Search Events\\n`;\n      response += `**Search Terms**: ${search_criteria || 'All events'}\\n`;\n      response += `**Timeframe**: ${timeframe || 'All time'}\\n`;\n      response += `**Status**: Event search request processed\\n\\n`;\n      response += `*Note: Advanced search integration in progress*`;\n      break;\n      \n    default:\n      response += `**Error**: Unknown operation '${operation}'\\n`;\n      response += `**Supported Operations**: view, create, update, delete, search`;\n  }\n  \n  response += `\\n\\n**Processing Time**: ${Date.now() - startTime}ms\\n`;\n  response += `**Smart Calendar Hub**: Active and operational`;\n  \n  return response;\n  \n} catch (error) {\n  console.error('[SMART_CALENDAR] Error:', error.message);\n  return `‚ùå **Smart Calendar Error**\\n\\nError processing calendar request: ${error.message}\\n\\n**Time**: ${new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' })}\\n**Contact**: System administrator`;\n}"
      },
      "id": "5471f6a4-e593-4f13-aadf-04d2cbb51eda",
      "name": "Smart Calendar Manager",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        0,
        440
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "value": "message",
          "mode": "list",
          "cachedResultName": "message"
        },
        "limit": "={{ $fromAI('Result_Limit', 'Maximum number of results to return (default 20)', 'number') || 20 }}",
        "where": {
          "values": [
            {
              "column": "channelId",
              "value": "{{ $fromAI('Channel_ID', 'Channel ID to search within', 'string') }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "createdAt",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "id": "2017740d-e1da-4e51-b89d-2a6280029dbf",
      "name": "Intelligent Search Hub",
      "type": "n8n-nodes-base.mySqlTool",
      "typeVersion": 2.4,
      "position": [
        -160,
        500
      ],
      "credentials": {
        "mySql": {
          "id": "TvnUCP0CFWmGulQM",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "query": "={{ $fromAI('Search_Query', 'The search query for web research', 'string') }}",
        "options": {
          "topic": "={{ $fromAI('Search_Topic', 'Search topic: general, news, or finance', 'string') || 'general' }}",
          "days": "={{ $fromAI('Time_Range_Days', 'Number of days to search back (for news/recent info)', 'number') || 30 }}"
        }
      },
      "id": "7d0d39a5-6778-4fa5-8997-191fef438b30",
      "name": "Tavily AI Web Research",
      "type": "@tavily/n8n-nodes-tavily.tavilyTool",
      "typeVersion": 1,
      "position": [
        140,
        640
      ],
      "credentials": {
        "tavilyApi": {
          "id": "ZcrGNEPykVcMHrHn",
          "name": "Tavily account"
        }
      }
    },
    {
      "parameters": {
        "name": "gsa_research_suite",
        "description": "Comprehensive GSA Schedule qualification and value proposition development. Analyzes industry fit, identifies decision makers, and creates targeted value propositions for federal contracting opportunities.",
        "jsCode": "// GSA Research Suite - Optimized for v3.0\nconst startTime = Date.now();\nconsole.log('[GSA_RESEARCH] Processing:', JSON.stringify($input.item.json, null, 2));\n\ntry {\n  const { company, focus = 'complete' } = $input.item.json;\n  \n  if (!company || company.trim() === '') {\n    throw new Error('Company name or URL is required');\n  }\n  \n  // In production, this would call the GSA Research Sub-Workflow\n  // For now, returning a structured template response\n  \n  let response = `üîç **GSA Research Suite Analysis: ${company}**\\n\\n`;\n  \n  response += `**‚úÖ GSA Status**: ANALYSIS IN PROGRESS\\n`;\n  response += `**üìä Research Focus**: ${focus.toUpperCase()}\\n`;\n  response += `**üè≠ Company**: ${company}\\n\\n`;\n  \n  if (focus === 'qualification' || focus === 'complete') {\n    response += `**üéØ GSA Qualification Assessment:**\\n`;\n    response += `‚Ä¢ Business Profile Analysis: Pending\\n`;\n    response += `‚Ä¢ Industry Classification: In Progress\\n`;\n    response += `‚Ä¢ NAICS Code Matching: Scheduled\\n`;\n    response += `‚Ä¢ Schedule Recommendations: Analyzing\\n\\n`;\n  }\n  \n  if (focus === 'decision_makers' || focus === 'complete') {\n    response += `**üë• Decision Maker Research:**\\n`;\n    response += `‚Ä¢ Executive Team Identification: In Progress\\n`;\n    response += `‚Ä¢ Contact Information Gathering: Scheduled\\n`;\n    response += `‚Ä¢ Authority Level Assessment: Pending\\n\\n`;\n  }\n  \n  if (focus === 'value_prop' || focus === 'complete') {\n    response += `**üí° Value Proposition Development:**\\n`;\n    response += `‚Ä¢ Industry-Specific Benefits: Analyzing\\n`;\n    response += `‚Ä¢ Federal Market Opportunities: Researching\\n`;\n    response += `‚Ä¢ Competitive Advantages: Identifying\\n`;\n    response += `‚Ä¢ Call Strategy Development: Pending\\n\\n`;\n  }\n  \n  response += `**üöÄ Next Steps:**\\n`;\n  response += `‚Ä¢ Research completion: 2-3 minutes\\n`;\n  response += `‚Ä¢ Schedule GSA consultation with specialists\\n`;\n  response += `‚Ä¢ Prepare qualification documentation\\n\\n`;\n  \n  response += `**‚è±Ô∏è Processing Time**: ${Date.now() - startTime}ms\\n`;\n  response += `**üîß Research Suite**: Active and operational\\n`;\n  response += `**üìû Contact**: Schedule consultation with NRG GSA team`;\n  \n  return response;\n  \n} catch (error) {\n  console.error('[GSA_RESEARCH] Error:', error.message);\n  const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n  \n  return `üö® **GSA Research Error**\\n\\nError analyzing company: ${error.message}\\n\\n**Time**: ${currentTime}\\n**Status**: Contact GSA research team for manual analysis`;\n}"
      },
      "id": "39268f3a-2057-4bf9-91f4-e74367a47e35",
      "name": "GSA Research Suite",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        820,
        440
      ]
    },
    {
      "parameters": {
        "sendTo": "={{ $fromAI('To', 'Recipient email address', 'string') }}",
        "subject": "={{ $fromAI('Subject', 'Email subject line', 'string') }}",
        "message": "={{ $fromAI('Message', 'Email message content', 'string') }}",
        "options": {
          "bccList": "={{ $fromAI('BCC', 'BCC recipients (comma separated)', 'string', true) }}",
          "ccList": "={{ $fromAI('CC', 'CC recipients (comma separated)', 'string', true) }}",
          "replyTo": "={{ $fromAI('ReplyTo', 'Reply-to email address', 'string', true) }}"
        }
      },
      "type": "n8n-nodes-base.gmailTool",
      "typeVersion": 2.1,
      "position": [
        -20,
        660
      ],
      "id": "0359e20f-1ba6-41ce-99c2-3ca162b94b89",
      "name": "Gmail Communication",
      "webhookId": "6d8ea934-429b-4c20-a60e-eed19377d14f",
      "credentials": {
        "gmailOAuth2": {
          "id": "TFVptUViBL54Sw6O",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "description": "Extract and analyze transcripts from YouTube videos. Provide YouTube URL to get full transcript with timestamps and analysis capabilities.",
        "jsCode": "// YouTube Analysis Tool - v3.0 Optimized\nconst startTime = Date.now();\nconsole.log('[YOUTUBE_ANALYSIS] Processing request:', JSON.stringify($input.item.json, null, 2));\n\ntry {\n  const { youtube_url, url, video_url } = $input.item.json;\n  const youtubeUrl = youtube_url || url || video_url || '';\n  \n  if (!youtubeUrl || (!youtubeUrl.includes('youtube.com') && !youtubeUrl.includes('youtu.be'))) {\n    throw new Error('Valid YouTube URL is required');\n  }\n  \n  // In production, this would call the YouTube Transcript Service workflow\n  // For now, returning a structured template response\n  \n  let response = `üé¨ **YouTube Analysis Processing**\\n\\n`;\n  response += `**üìπ Video URL**: ${youtubeUrl}\\n`;\n  response += `**‚ö° Status**: Transcript extraction in progress\\n`;\n  response += `**üîÑ Processing**: Analyzing video content\\n\\n`;\n  \n  response += `**üéØ Analysis Capabilities**:\\n`;\n  response += `‚Ä¢ **Transcript Extraction**: Full text with timestamps\\n`;\n  response += `‚Ä¢ **Key Insights**: Main points and takeaways\\n`;\n  response += `‚Ä¢ **Action Items**: Specific tasks and recommendations\\n`;\n  response += `‚Ä¢ **Competitive Intel**: Strategy and approach analysis\\n`;\n  response += `‚Ä¢ **Learning Summary**: Educational content extraction\\n\\n`;\n  \n  response += `**‚è±Ô∏è Estimated Completion**: 30-60 seconds\\n`;\n  response += `**üí° Next**: Ask specific questions about video content for detailed analysis\\n\\n`;\n  \n  response += `**üîß Processing Time**: ${Date.now() - startTime}ms\\n`;\n  response += `**üìä YouTube Analysis Suite**: Active and operational`;\n  \n  return response;\n  \n} catch (error) {\n  console.error('[YOUTUBE_ANALYSIS] Error:', error.message);\n  return `‚ùå **YouTube Analysis Error**\\n\\n${error.message}\\n\\n**Troubleshooting**:\\n‚Ä¢ Verify YouTube URL is valid and publicly accessible\\n‚Ä¢ Check that video has captions or auto-generated subtitles\\n‚Ä¢ Contact support if issue persists`;\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        300,
        640
      ],
      "id": "0de14f4d-a345-4ac7-a06d-d2f43187d292",
      "name": "YouTube Analysis"
    },
    {
      "parameters": {
        "dataToSave": {
          "values": [
            {
              "key": "execution_metadata",
              "value": "={{ JSON.stringify({ timestamp: new Date().toISOString(), user_message: $('Unified Input & Context Processor').first().json.input, session_id: $('Unified Input & Context Processor').first().json.sessionId, platform: $('Unified Input & Context Processor').first().json.platform, channel_id: $('Unified Input & Context Processor').first().json.channelId, message_count: $('Context Formatter').first().json.messageCount }) }}"
            },
            {
              "key": "ai_response_data",
              "value": "={{ JSON.stringify({ ai_output: $('Enhanced AI Agent v3.0').first().json.output, tools_used: $('Enhanced AI Agent v3.0').first().json.toolCalls ? Object.keys($('Enhanced AI Agent v3.0').first().json.toolCalls) : [], processing_time: $('Enhanced AI Agent v3.0').first().json.processingTime, response_length: ($('Enhanced AI Agent v3.0').first().json.output || '').length }) }}"
            },
            {
              "key": "performance_metrics",
              "value": "={{ JSON.stringify({ total_processing_time: Date.now() - $('Unified Input & Context Processor').first().json.processingStartTime, database_query_time: $('Enhanced Channel History Query').first()?.executionTime || 0, workflow_version: '3.0', optimization_status: 'active' }) }}"
            }
          ]
        }
      },
      "id": "76349de7-079f-4e9f-8fce-629b1d522241",
      "name": "Unified Debug & Performance Data",
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Streamlined Response Formatter - v3.0 Optimization\nconst startTime = Date.now();\nconsole.log('=== STREAMLINED RESPONSE FORMATTER v3.0 ===');\n\ntry {\n  const aiResponse = $('Enhanced AI Agent v3.0').first().json;\n  const contextData = $('Context Formatter').first().json;\n  \n  console.log('AI Response keys:', Object.keys(aiResponse || {}));\n  console.log('Context data available:', !!contextData);\n  \n  // Optimized response extraction with ordered fallbacks\n  const extractResponse = (response) => {\n    const sources = [\n      () => response?.output,\n      () => response?.text,\n      () => response?.content,\n      () => response?.choices?.[0]?.message?.content,\n      () => typeof response === 'string' && response.length > 10 ? response : null\n    ];\n    \n    for (const getResponse of sources) {\n      const result = getResponse();\n      if (result?.trim()?.length > 0) {\n        return result;\n      }\n    }\n    return null;\n  };\n  \n  let responseText = extractResponse(aiResponse);\n  \n  // Generate contextual fallback if needed\n  if (!responseText) {\n    const userMessage = contextData?.input || 'your request';\n    const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n    \n    responseText = `ü§ñ **AI Assistant v3.0 Response**\\n\\nI received your request: \"${userMessage}\"\\n\\nI'm experiencing technical difficulties with the advanced processing tools right now.\\n\\n**What I Can Still Help With:**\\n‚Ä¢ General questions and conversation\\n‚Ä¢ Basic analysis and recommendations\\n‚Ä¢ System status updates\\n\\n**Time**: ${currentTime}\\n**Status**: Core AI operational, advanced tools temporarily unavailable\\n\\n**Optimization**: v3.0 streamlined processing active`;\n  }\n  \n  const result = contextData?.isTestMode ? {\n    output: responseText,\n    testMode: true,\n    timestamp: new Date().toISOString(),\n    processingTime: Date.now() - startTime,\n    version: '3.0'\n  } : {\n    content: responseText,\n    metadata: {\n      userId: contextData?.userId || 'unknown',\n      channelId: contextData?.channelId || 'unknown',\n      sessionId: contextData?.sessionId || 'unknown',\n      platform: contextData?.platform || 'discordant',\n      messageCount: contextData?.messageCount || 0,\n      timestamp: new Date().toISOString(),\n      responseSource: 'n8n-workflow-v3.0',\n      processingTime: Date.now() - startTime,\n      responseLength: responseText?.length || 0,\n      optimizationLevel: 'v3.0-streamlined'\n    }\n  };\n  \n  console.log('=== RESPONSE FORMATTER SUCCESS ===');\n  console.log('Response length:', responseText?.length || 0);\n  console.log('Processing time:', Date.now() - startTime, 'ms');\n  \n  return result;\n  \n} catch (error) {\n  console.error('=== RESPONSE FORMATTER ERROR ===');\n  console.error('Error details:', error.message);\n  \n  const currentTime = new Date().toLocaleTimeString('en-US', { timeZone: 'America/New_York' });\n  \n  return {\n    content: `üö® **Workflow Processing Error v3.0**\\n\\nA critical error occurred while formatting your response.\\n\\n**Error**: ${error.message}\\n**Time**: ${currentTime}\\n\\n**Recovery Options**:\\n1. Retry your request\\n2. Simplify your request\\n3. Contact system administrator\\n\\n**Optimization Status**: v3.0 error handling active`,\n    metadata: {\n      errorOccurred: true,\n      errorMessage: error.message,\n      timestamp: new Date().toISOString(),\n      processingTime: Date.now() - startTime,\n      version: '3.0'\n    }\n  };\n}"
      },
      "id": "4ac1776b-c986-42d6-9e95-e8fd05f6e865",
      "name": "Streamlined Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO message (content, channelId, memberId, createdAt) VALUES ('{{ $('Enhanced AI Agent v3.0').first().json.output || $('Enhanced AI Agent v3.0').first().json.text }}', '{{ $('Unified Input & Context Processor').first().json.channelId }}', 'ai-assistant-bot', NOW())"
      },
      "id": "4691c4a7-a439-4c7c-9cda-9a24522ab0b0",
      "name": "Save AI Response to Channel",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        0,
        200
      ],
      "credentials": {
        "mySql": {
          "id": "TvnUCP0CFWmGulQM",
          "name": "MySQL account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "3d4679fc-0f64-4276-926d-bfa5211b9a3b",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        600,
        200
      ]
    }
  ],
  "connections": {
    "Discordant Chat Webhook": {
      "main": [
        [
          {
            "node": "Unified Input & Context Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Test Interface": {
      "main": [
        [
          {
            "node": "Unified Input & Context Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unified Input & Context Processor": {
      "main": [
        [
          {
            "node": "Enhanced Channel History Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Channel History Query": {
      "main": [
        [
          {
            "node": "Context Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Context Formatter": {
      "main": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-Mini Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced AI Agent v3.0": {
      "main": [
        [
          {
            "node": "Save AI Response to Channel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Unified Debug & Performance Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Smart Calendar Manager": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Intelligent Search Hub": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tavily AI Web Research": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GSA Research Suite": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Communication": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Analysis": {
      "ai_tool": [
        [
          {
            "node": "Enhanced AI Agent v3.0",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Unified Debug & Performance Data": {
      "main": [
        [
          {
            "node": "Streamlined Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Streamlined Response Formatter": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save AI Response to Channel": {
      "main": [
        [
          {
            "node": "Streamlined Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "136461ac021bda65593ed5d2f70798d0433ed7859abfc9e2ca43aa4b9c0b779e"
  }
}